Index: src/main/java/GUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport javax.swing.border.EmptyBorder;\n\nimport java.awt.*;\nimport java.beans.PropertyChangeListener;\nimport java.io.IOException;\nimport javax.swing.border.*;\nimport java.awt.event.*;\nimport javax.swing.border.EmptyBorder;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class GUI implements Runnable {\n    private JFrame frame;\n    private ChatListPanel chatListPanel;\n    private LoginPanel loginPanel;\n    private chatPanel chatPanel;\n    private ProfilePanel profilePanel;\n    private RoundedButton logoutButton;\n    // private RoundedButton addFriendButton;\n    // private RoundedButton addBlockButton;a\n    private Client client;\n    private RoundedPanel headerPanel;\n    private JPopupMenu profileMenu;\n    private CircularButton profileButton;\n    int count = 0;\n    private ProfilePanel selectedProfilePanel;\n\n    public GUI(LoginPanel loginPanel) {\n        this.loginPanel = loginPanel;\n    }\n\n    private static class RoundedButton extends JButton {\n        private Color backgroundColor;\n        private Color hoverBackgroundColor;\n        private Color pressedBackgroundColor;\n        private int radius;\n        private boolean isHovered = false;\n        private boolean isPressed = false;\n\n        public RoundedButton(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setContentAreaFilled(false);\n            setFocusPainted(false);\n            setBorderPainted(false);\n            setOpaque(false);\n\n            // Add hover effect\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseEntered(MouseEvent e) {\n                    isHovered = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseExited(MouseEvent e) {\n                    isHovered = false;\n                    repaint();\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    isPressed = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseReleased(MouseEvent e) {\n                    isPressed = false;\n                    repaint();\n                }\n            });\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            // Get current background color\n            Color background = getBackground();\n            if (isPressed) {\n                background = background.darker();\n            } else if (isHovered) {\n                background = background.brighter();\n            }\n\n            g2.setColor(background);\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            super.paintComponent(g);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedPanel extends JPanel {\n        private int radius;\n\n        public RoundedPanel(int radius) {\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            super.paintComponent(g);\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n            g2.dispose();\n        }\n    }\n    private void updateProfileButton() {\n        String profilePic = profilePanel.getProfilePic();\n        if (profilePic == null || profilePic.isEmpty() || profilePic.equals(\"\") \n                || profilePic.equals(\"profile.png\")) {\n            profilePic = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n        }\n        \n        // Remove old button wrapper\n        Component[] components = headerPanel.getComponents();\n        for (Component comp : components) {\n            if (comp instanceof JPanel && comp.getName() != null \n                    && comp.getName().equals(\"buttonWrapper\")) {\n                headerPanel.remove(comp);\n            }\n        }\n    \n        // Create new button\n        profileButton = new CircularButton(profilePic, 50);\n        profileButton.setBorder(new EmptyBorder(0, 0, 0, 10));\n        \n        // Create new wrapper\n        JPanel buttonWrapper = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        buttonWrapper.setName(\"buttonWrapper\"); // For identification\n        buttonWrapper.setBackground(new Color(245, 245, 245));\n        buttonWrapper.setBorder(new EmptyBorder(0, 0, 30, 200));\n        buttonWrapper.add(profileButton);\n        \n        // Add new wrapper\n        headerPanel.add(buttonWrapper, BorderLayout.EAST);\n        headerPanel.revalidate();\n        headerPanel.repaint();\n    }\n    private void createHeader() {\n        headerPanel = new RoundedPanel(15);\n        headerPanel.setLayout(new BorderLayout());\n        headerPanel.setBackground(new Color(245, 245, 245));\n        headerPanel.setPreferredSize(new Dimension(frame.getWidth(), 60));\n        // headerPanel.setBorder(new EmptyBorder(10,10,10,10));\n\n        String profilePic = profilePanel.getProfilePic();\n        if (profilePic == null || profilePic.isEmpty() || profilePic.equals(\"\") || profilePic.equals(\"profile.png\")) {\n            profilePic = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n        }\n        profileButton = new CircularButton(profilePic, 50);\n\n        profileButton.setBorder(new EmptyBorder(0, 0, 0, 10));\n        JPanel buttonWrapper = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        buttonWrapper.setBackground(new Color(245, 245, 245));\n        buttonWrapper.setBorder(new EmptyBorder(0, 0, 30, 200)); // top, left, bottom, right padding\n        buttonWrapper.add(profileButton);\n        headerPanel.add(buttonWrapper, BorderLayout.EAST);\n\n        profileMenu = new JPopupMenu();\n        profileMenu.setBackground(new Color(30, 30, 30));\n\n        JMenuItem profileItem = new JMenuItem(\"My Profile\");\n        profileItem.setForeground(Color.WHITE);\n        profileItem.setBackground(new Color(30, 30, 30));\n        profileItem.addActionListener(e -> {\n            try {\n                ArrayList<String> friendList = new ArrayList<>();\n                ArrayList<String> blockList = new ArrayList<>();\n                String friends = client.getFriendList();\n                String blocks = client.getBlockList();\n                if (!friends.isEmpty()) {\n                    friendList = (ArrayList<String>) Arrays.asList(friends.split(\n                            \"\" + (char) 29));\n                }\n                if (!blocks.isEmpty()) {\n                    blockList =  (ArrayList<String>) Arrays.asList(blocks.split(\n                            \"\" + (char) 29));\n                }\n                profilePanel.createComponent(friendList, blockList);\n            } catch (IOException ex) {\n                disconnect();\n            }\n\n\n\n        });\n\n        JMenuItem editProfileItem = new JMenuItem(\"Edit Profile\");\n        editProfileItem.setForeground(Color.WHITE);\n        editProfileItem.setBackground(new Color(30, 30, 30));\n        editProfileItem.addActionListener(e -> {\n            profilePanel.setVisible(true);\n            profilePanel.editProfile(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    // This will run after save button is clicked\n                    SwingUtilities.invokeLater(() -> {\n                        updateProfileButton();\n                        updateProfilePanel();\n                    });\n                }\n            }); \n            updateProfileButton(); \n        });\n\n        profileMenu.add(profileItem);\n        profileMenu.add(editProfileItem);\n\n        profileButton.addActionListener(e -> {\n            profileMenu.show(profileButton, 0, profileButton.getHeight());\n        });\n\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.gridwidth = GridBagConstraints.REMAINDER;\n        gbc.fill = GridBagConstraints.HORIZONTAL;\n        gbc.weightx = 1.0;\n        gbc.weighty = 0.0;\n        gbc.gridy = 0;\n        frame.add(headerPanel, gbc);\n    }\n\n    class CircularButton extends JButton {\n        private Image image;\n        private int size;\n\n        public CircularButton(String imagePath, int size) {\n            this.size = size;\n            setPreferredSize(new Dimension(size, size));\n            setContentAreaFilled(false);\n            setBorderPainted(false);\n            setFocusPainted(false);\n\n            try {\n                // Load and scale image\n                ImageIcon icon = new ImageIcon(imagePath);\n                Image originalImage = icon.getImage();\n\n                // Create scaled instance with high quality\n                this.image = originalImage.getScaledInstance(size, size, Image.SCALE_AREA_AVERAGING);\n\n                // Pre-render for better performance\n                MediaTracker tracker = new MediaTracker(this);\n                tracker.addImage(this.image, 0);\n                tracker.waitForID(0);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                    RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            // Draw white circle background\n            g2.setColor(Color.WHITE);\n            g2.fillOval(0, 0, size, size);\n\n            // Create circular clip\n            g2.setClip(new Ellipse2D.Float(1, 1, size - 2, size - 2));\n            // Draw image if loaded\n            if (image != null) {\n                g2.drawImage(image, 0, 0, this);\n            }\n\n            g2.setClip(null);\n            g2.setColor(new Color(200, 200, 200)); // Lighter gray for softer appearance\n            g2.setStroke(new BasicStroke(1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));\n            g2.drawOval(1, 1, size - 2, size - 2);\n            g2.dispose();\n        }\n    }\n\n    public void run() {\n        frame = new JFrame(\"Chatter\");\n        frame.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n\n        // addFriendButton = new RoundedButton(\"Friend\", 15);\n        // addFriendButton.setBackground(new Color(0, 149, 246));\n        // addFriendButton.setForeground(Color.WHITE);\n        // addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        // addFriendButton.setPreferredSize(new Dimension(150, 20));\n\n        // addBlockButton = new RoundedButton(\"Block\", 15);\n        // addBlockButton.setBackground(new Color(0, 149, 246));\n        // addBlockButton.setForeground(Color.WHITE);\n        // addBlockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        // addBlockButton.setPreferredSize(new Dimension(150, 20));\n\n        client = loginPanel.getClient();\n        if (client == null) {\n            frame.setVisible(false);\n            this.loginPanel = null;\n            frame.dispose();\n            return;\n        }\n        if (!isConnected()) {\n            displayError(\"Connection Lost\");\n            frame.setVisible(false);\n            this.loginPanel = null;\n            frame.dispose();\n            return;\n        }\n        String username = loginPanel.getUsername();\n        chatPanel = new chatPanel(client);\n        profilePanel = new ProfilePanel(username, client);\n        updateProfilePanel();\n        chatListPanel = new ChatListPanel(client);\n        // NEW CHANGE TESTING\n        refreshChats();\n        createHeader();\n        gbc.fill = GridBagConstraints.BOTH;\n        gbc.anchor = GridBagConstraints.CENTER;\n\n        gbc.weightx = 0.2;\n        gbc.weighty = 1.0;\n        frame.add(chatListPanel, gbc);\n\n        gbc.weightx = 0.5;\n        frame.add(chatPanel, gbc);\n\n        gbc.weightx = 1.2;\n        // frame.add(profilePanel, gbc);\n        chatListPanel.addPropertyChangeListener(\"selectedChat\", evt -> {\n            String selectedUser = (String) evt.getNewValue();\n            if (selectedUser != null) {\n                try {\n                    count += 1;\n                    chatPanel.refreshChat(selectedUser);\n                    if (count > 1) {\n                        frame.remove(selectedProfilePanel);\n                    }\n                    String profile = client.accessUserProfile(selectedUser);\n                    String photos = client.accessPhotosFromUser(selectedUser);\n                    selectedProfilePanel = new ProfilePanel(profile, photos);\n                    JButton[] friendAndBlockButtons = selectedProfilePanel.getFriendAndBlockButtons();\n                    ArrayList<String> friendList = new ArrayList<>();\n                    ArrayList<String> blockList = new ArrayList<>();\n                    try {\n                        String friends = client.getFriendList();\n                        if (!friends.isEmpty()) {\n                            friendList = (ArrayList<String>) Arrays.asList(friends.split(\n                                    \"\" + (char) 29));\n                        }\n                        String blocks = client.getBlockList();\n                        if (!blocks.isEmpty()) {\n                            blockList = (ArrayList<String>) Arrays.asList(blocks.split(\n                                    \"\" + (char) 29));\n                        }\n                    } catch (IOException ex) {\n                        disconnect();\n                        return;\n                    }\n\n                    if (friendList.contains(selectedUser)) {\n                        friendAndBlockButtons[0].setText(\"Unfriend\");\n                    }\n\n                    if (blockList.contains(selectedUser)) {\n                        friendAndBlockButtons[1].setText(\"Unblock\");\n                    }\n\n                    friendAndBlockButtons[0].addActionListener(new ActionListener() {\n                        @Override\n                        public void actionPerformed(ActionEvent e) {\n                            try {\n                                if (!client.addFriend(selectedUser)) {\n                                    client.removeFriend(selectedUser);\n                                    friendAndBlockButtons[0].setText(\"Friend\");\n                                } else {\n                                    friendAndBlockButtons[0].setText(\"Unfriend\");\n                                }\n                            } catch (Exception ex) {\n                                disconnect();\n                            }\n                        }\n                    });\n\n                    friendAndBlockButtons[1].addActionListener(new ActionListener() {\n                        @Override\n                        public void actionPerformed(ActionEvent e) {\n                            try {\n                                if (!client.blockUser(selectedUser)) {\n                                    client.unblockUser(selectedUser);\n                                    friendAndBlockButtons[1].setText(\"Block\");\n                                } else {\n                                    friendAndBlockButtons[1].setText(\"Unblock\");\n                                }\n                            } catch (Exception ex) {\n                                disconnect();\n                            }\n                        }\n                    });\n\n                    frame.add(selectedProfilePanel, gbc);\n                    frame.revalidate();\n                    frame.repaint();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        // // addFriendButton.addActionListener(e -> {\n        // // try {\n        // // String otherUsername = chatListPanel.getSelectedChat();\n        // // if (otherUsername == null || otherUsername.isEmpty()) {\n        // // return;\n        // // }\n        // // if (!client.addFriend(otherUsername)) {\n        // // client.removeFriend(otherUsername);\n        // // }\n        // // } catch (IOException ex) {\n        // // disconnect();\n        // // }\n        // // });\n\n        // // addBlockButton.addActionListener(e -> {\n        // // try {\n        // // String otherUsername = chatListPanel.getSelectedChat();\n        // // if (otherUsername == null || otherUsername.isEmpty()) {\n        // // return;\n        // // }\n        // // if (!client.blockUser(otherUsername)) {\n        // // client.unblockUser(otherUsername);\n        // // }\n        // // } catch (IOException ex) {\n        // // disconnect();\n        // // }\n        // // });\n\n        logoutButton = new RoundedButton(\"Logout\", 15);\n        logoutButton.setBackground(new Color(0, 149, 246));\n        logoutButton.setForeground(Color.WHITE);\n        logoutButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        logoutButton.setPreferredSize(new Dimension(100, 20));\n        logoutButton.addActionListener(e -> logout());\n        RoundedPanel logoutPanel = new RoundedPanel(15);\n        logoutPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));\n        logoutPanel.add(logoutButton);\n        // // logoutPanel.add(addFriendButton, logoutConstraints);\n        // // logoutPanel.add(addBlockButton, logoutConstraints);\n        GridBagConstraints logoutGbc = new GridBagConstraints();\n        logoutGbc.gridx = 2; // Right column\n        logoutGbc.gridy = 2; // Bottom row\n        logoutGbc.anchor = GridBagConstraints.SOUTHEAST;\n        logoutGbc.insets = new Insets(0, 0, 10, 10);\n        frame.add(logoutPanel, logoutGbc);\n        frame.setSize(1200, 800);\n        frame.setLocationRelativeTo(null);\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                logout();\n                disconnect();\n            }\n        });\n        updateGUI();\n        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n        frame.setSize(screenSize.width, screenSize.height);\n        // Set frame to maximized state\n        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n\n        // Center the dialog\n        frame.setLocation(0, 0);\n\n        // Make the dialog visible\n        frame.setVisible(true);\n        scheduleUpdates();\n    }\n\n    public void refreshChats() {\n        String chats = \"\";\n        try {\n            chats = client.getChatList();\n        } catch (IOException e) {\n            disconnect();\n            return;\n        }\n        String[] chatsArray = chats.split(\"\" + (char) 29);\n        chatListPanel.refreshChats(chatsArray);\n        String selectedChat = chatListPanel.getSelectedChat();\n        if (selectedChat != null && !selectedChat.isEmpty()) {\n            try {\n                chatPanel.refreshChat(selectedChat);\n            } catch (Exception e) {\n                // TODO: handle exception\n            }\n        }\n    }\n\n    public void updateProfilePanel() {\n        if (!isConnected()) {\n            return;\n        }\n        String profile = \"\";\n        try {\n            profile = client.accessProfile();\n        } catch (IOException e) {\n            disconnect();\n            return;\n        }\n        if (profile == null) {\n            disconnect();\n            return;\n        }\n        String[] profileParts = profile.split(\"\" + (char) 29);\n\n        String username = profileParts[0].substring(profileParts[0].indexOf(\":\") + 1);\n        String firstName = profileParts[1].substring(profileParts[1].indexOf(\":\") + 1);\n        String lastName = profileParts[2].substring(profileParts[2].indexOf(\":\") + 1);\n        String bio = profileParts[3].substring(profileParts[3].indexOf(\":\") + 1);\n        String birthday = profileParts[4].substring(profileParts[4].indexOf(\":\") + 1);\n        String[] birthdayParts = birthday.split(\"/\");\n        String day = birthdayParts[1];\n        String month = birthdayParts[0];\n        String year = birthdayParts[2];\n        String profilePic = profileParts[5].substring(profileParts[5].indexOf(\":\") + 1);\n        String friendsOnly = profileParts[6].substring(profileParts[6].indexOf(\":\") + 1);\n\n        profilePanel.refreshProfile(username, firstName, lastName, bio, month, day, year, profilePic, friendsOnly);\n    }\n\n    // public void updateFriendsAndBlocks() {\n    // String friends;\n    // try {\n    // friends = client.getFriendList();\n    // } catch (IOException e) {\n    // disconnect();\n    // return;\n    // }\n    // String[] friendsArray = friends.split(\"\" + (char) 29);\n    // String blocks;\n    // try {\n    // blocks = client.getBlockList();\n    // } catch (IOException e) {\n    // disconnect();\n    // return;\n    // }\n    // String[] blocksArray = blocks.split(\"\" + (char) 29);\n    // profilePanel.updateFriendsAndBlocks(friendsArray, blocksArray);\n    // }\n\n    public void updateChat() {\n        // chatPanel.updateChat(chat);\n    }\n\n    public void displayMessage(String message) {\n        // chatPanel.displayMessage();\n    }\n\n    public void displayError(String error) {\n        JOptionPane.showMessageDialog(frame, error, \"Error\", JOptionPane.ERROR_MESSAGE);\n    }\n\n    private void scheduleUpdates() {\n        Timer timer = new Timer(300, new ActionListener() { // Check every 1 second\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Update GUI components\n                if (loginPanel == null) {\n                    return;\n                }\n                updateGUI();\n            }\n        });\n        if (frame.isVisible()) {\n            timer.start();\n        }\n    }\n\n    public void updateGUI() {\n        if (!isConnected()) {\n            displayError(\"Connection Lost\");\n            disconnect();\n            return;\n        }\n        updateProfilePanel();\n        // updateFriendsAndBlocks();\n        refreshChats();\n    }\n\n    public void logout() {\n        try {\n            client.logout();\n        } catch (IOException e) {\n            displayError(\"Connection Lost\");\n            disconnect();\n            return;\n        }\n        this.loginPanel = null;\n        frame.setVisible(false);\n        frame.dispose();\n    }\n\n    public void disconnect() {\n        if (client != null) {\n            client.disconnect();\n            client = null;\n        }\n        frame.setVisible(false);\n        frame.dispose();\n    }\n\n    public boolean isDone() {\n        return loginPanel == null;\n    }\n\n    public boolean isConnected() {\n        try {\n            client.login(\"\");\n        } catch (IOException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        LoginPanel loginPanel;\n        int i = JOptionPane.showConfirmDialog(null, \"Auto login to user1 Password1$?\",\n                \"Auto Login\", JOptionPane.YES_NO_OPTION);\n        if (i == JOptionPane.YES_OPTION) {\n            try {\n                Client client = new Client();\n                client.login(\"user3\" + (char) 29 + \"Password3$\");\n                loginPanel = new LoginPanel(client);\n            } catch (IOException e) {\n                JOptionPane.showMessageDialog(null, \"Could not connect to server\",\n                        \"Error\", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n            while (true) {\n                SwingUtilities.invokeLater(loginPanel);\n                while (!loginPanel.isDone()) { // Wait for login panel to finish\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                GUI gui = new GUI(loginPanel);\n                SwingUtilities.invokeLater(gui);\n                while (!gui.isDone()) {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                int j = JOptionPane.showConfirmDialog(null, \"continue?\",\n                        \"Auto Login\", JOptionPane.YES_NO_OPTION);\n                if (j != JOptionPane.YES_OPTION) {\n                    System.out.println(\"Disconnecting...\");\n                    gui.disconnect();\n                    loginPanel = null;\n                    return;\n                }\n            }\n        } else if (i == JOptionPane.NO_OPTION) {\n            while (true) {\n                try {\n                    loginPanel = new LoginPanel(new Client());\n                } catch (IOException e) {\n                    JOptionPane.showMessageDialog(null, \"Could not connect to server\",\n                            \"Error\", JOptionPane.ERROR_MESSAGE);\n                    return;\n                }\n                if (!loginPanel.isConnected()) {\n                    return;\n                }\n                SwingUtilities.invokeLater(loginPanel);\n                while (!loginPanel.isDone()) { // Wait for login panel to finish\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                GUI gui = new GUI(loginPanel);\n                SwingUtilities.invokeLater(gui);\n                while (!gui.isDone()) {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GUI.java b/src/main/java/GUI.java
--- a/src/main/java/GUI.java	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/src/main/java/GUI.java	(date 1733504772297)
@@ -20,7 +20,7 @@
     private ProfilePanel profilePanel;
     private RoundedButton logoutButton;
     // private RoundedButton addFriendButton;
-    // private RoundedButton addBlockButton;a
+    // private RoundedButton addBlockButton;
     private Client client;
     private RoundedPanel headerPanel;
     private JPopupMenu profileMenu;
@@ -493,7 +493,12 @@
             return;
         }
         String[] chatsArray = chats.split("" + (char) 29);
-        chatListPanel.refreshChats(chatsArray);
+        try {
+            chatListPanel.refreshChats(chatsArray);
+        } catch (IOException ex) {
+            disconnect();
+            return;
+        }
         String selectedChat = chatListPanel.getSelectedChat();
         if (selectedChat != null && !selectedChat.isEmpty()) {
             try {
Index: src/main/java/ProfilePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.BasicStroke;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Image;\nimport java.awt.Insets;\nimport java.awt.RenderingHints;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\nimport javax.swing.*;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport javax.swing.plaf.basic.BasicScrollBarUI;\n\npublic class ProfilePanel extends JPanel {\n    private GridBagConstraints constraints;\n    private JLabel usernameLabel;\n    private JLabel firstNameLabel;\n    private JLabel lastNameLabel;\n    private JLabel bioLabel;\n    private JLabel birthdayMonthLabel;\n    private JLabel birthdayDayLabel;\n    private JLabel birthdayYearLabel;\n    private JLabel friendsOnlyLabel;\n    private JLabel profilePic;\n    private RoundedButton addFriendButton;\n    private RoundedButton blockButton;\n    private Client client;\n\n    public String getProfilePic() {\n        return profilePic.getText();\n    }\n\n    private static class RoundedPanel extends JPanel {\n        private int radius;\n\n        public RoundedPanel(int radius) {\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            super.paintComponent(g);\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedButton extends JButton {\n        private Color backgroundColor;\n        private Color hoverBackgroundColor;\n        private Color pressedBackgroundColor;\n        private int radius;\n        private boolean isHovered = false;\n        private boolean isPressed = false;\n\n        public RoundedButton(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setContentAreaFilled(false);\n            setFocusPainted(false);\n            setBorderPainted(false);\n            setOpaque(false);\n\n            // Add hover effect\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseEntered(MouseEvent e) {\n                    isHovered = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseExited(MouseEvent e) {\n                    isHovered = false;\n                    repaint();\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    isPressed = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseReleased(MouseEvent e) {\n                    isPressed = false;\n                    repaint();\n                }\n            });\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            // Get current background color\n            Color background = getBackground();\n            if (isPressed) {\n                background = background.darker();\n            } else if (isHovered) {\n                background = background.brighter();\n            }\n\n            g2.setColor(background);\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            super.paintComponent(g);\n            g2.dispose();\n        }\n    }\n\n    private static class CircularImagePanel extends JPanel {\n        private Image image;\n        private int size;\n        private int a = getX();\n        private int b = getY();\n\n        public CircularImagePanel(String imagePath, int size) {\n            this.size = size;\n            try {\n                ImageIcon icon = new ImageIcon(imagePath);\n                Image originalImage = icon.getImage();\n                int originalWidth = originalImage.getWidth(null);\n                int originalHeight = originalImage.getHeight(null);\n\n                int cropSize = Math.min(originalWidth, originalHeight);\n                int x = (originalWidth - cropSize) / 2;\n                int y = (originalHeight - cropSize) / 2;\n                BufferedImage croppedImage = new BufferedImage(cropSize, cropSize, BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g2d = croppedImage.createGraphics();\n                g2d.drawImage(originalImage, 0, 0, cropSize, cropSize, x, y, x + cropSize, y + cropSize, null);\n                g2d.dispose();\n                image = croppedImage.getScaledInstance(size, size, Image.SCALE_SMOOTH);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            setPreferredSize(new Dimension(size, size));\n        }\n\n        public void updateImage(String imagePath, int size) {\n            this.size = size;\n            try {\n                // Load and process new image\n                ImageIcon icon = new ImageIcon(imagePath);\n                Image originalImage = icon.getImage();\n                int originalWidth = originalImage.getWidth(null);\n                int originalHeight = originalImage.getHeight(null);\n\n                // Crop to square\n                int cropSize = Math.min(originalWidth, originalHeight);\n                int x = (originalWidth - cropSize) / 2;\n                int y = (originalHeight - cropSize) / 2;\n\n                // Create new cropped image\n                BufferedImage croppedImage = new BufferedImage(cropSize, cropSize, BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g2d = croppedImage.createGraphics();\n                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                g2d.drawImage(originalImage, 0, 0, cropSize, cropSize, x, y, x + cropSize, y + cropSize, null);\n                g2d.dispose();\n\n                // Scale and set new image\n                this.image = croppedImage.getScaledInstance(size, size, Image.SCALE_SMOOTH);\n\n                // Update panel size\n\n                // Update panel bounds\n                setPreferredSize(new Dimension(size, size));\n\n                // Force complete repaint\n                revalidate();\n                repaint();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                    RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n\n            // Draw white circle background\n            g2.setColor(Color.WHITE);\n            g2.fillOval(0, 0, size, size);\n\n            // Create circular clip\n            g2.setClip(new Ellipse2D.Float(1, 1, size - 2, size - 2));\n            // Draw image if loaded\n            if (image != null) {\n                g2.drawImage(image, 0, 0, this);\n            }\n\n            g2.setClip(null);\n            g2.setColor(new Color(200, 200, 200)); // Lighter gray for softer appearance\n            g2.setStroke(new BasicStroke(1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));\n            g2.drawOval(1, 1, size - 2, size - 2);\n            g2.dispose();\n        }\n    }\n\n    public ProfilePanel(String username, Client client) {\n        try {\n            this.client = client;\n            this.setLayout(null);\n            this.usernameLabel = new JLabel(username);\n            char groupSeparator = (char) 29;\n            String profileInput = this.client.accessProfile();\n            String[] profileInfo = profileInput.split(groupSeparator + \"\");\n            profilePic = new JLabel(profileInfo[5].substring(profileInfo[5].indexOf(\":\") + 2));\n            JLabel pic = new JLabel(profilePic.getText());\n            if (pic.getText().equals(\"profile.png\") || profilePic.getText().isEmpty() || profilePic.getText().equals(\"\")) {\n                pic.setText(\"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\");\n            }\n            firstNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim());\n            lastNameLabel = new JLabel(profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            bioLabel = new JLabel(profileInfo[3].substring(profileInfo[3].indexOf(\":\") + 1).trim());\n            String birthday = profileInfo[4].substring(profileInfo[4].indexOf(\":\") + 1).trim();\n            String[] birthdayParts = birthday.split(\"/\");\n            birthdayMonthLabel = new JLabel(birthdayParts[0]);\n            birthdayDayLabel = new JLabel(birthdayParts[1]);\n            birthdayYearLabel = new JLabel(birthdayParts[2]);\n            friendsOnlyLabel = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(\":\") + 1));\n            // Get screen dimensions\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // Create and setup black background\n            JPanel blackBackground = new RoundedPanel(30);\n            blackBackground.setLayout(null);\n            blackBackground.setBackground(Color.BLACK);\n            int blackPanelWidth = (int) (screenSize.width * 0.6); // 60% width\n            blackBackground.setBounds(0, 10, blackPanelWidth, screenSize.height - 180);\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                pic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            this.add(imagePanel);\n            Font labelFont = new Font(\"Monospaced\", Font.BOLD, 16);\n            Color textColor = Color.WHITE;\n            int fieldWidth = 400;\n            int fieldHeight = 30;\n            int startX = 50;\n            int startY = 250;\n            int verticalGap = 25;\n\n            // Full Name\n            JLabel fullNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim() + \" \"\n                    + profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            fullNameLabel.setFont(labelFont);\n            fullNameLabel.setForeground(textColor);\n            fullNameLabel.setBounds(startX, startY, fieldWidth, fieldHeight); // maybe change height to fieldHeight\n\n            // First Name\n            firstNameLabel.setFont(labelFont);\n            firstNameLabel.setForeground(textColor);\n            firstNameLabel.setBounds(startX, startY + verticalGap, fieldWidth, fieldHeight);\n\n            // Last Name\n            lastNameLabel.setFont(labelFont);\n            lastNameLabel.setForeground(textColor);\n            lastNameLabel.setBounds(startX, startY + (verticalGap * 2), fieldWidth, fieldHeight);\n\n            // Bio\n            bioLabel.setFont(labelFont);\n            bioLabel.setForeground(textColor);\n            bioLabel.setBounds(startX, startY + (verticalGap * 3), fieldWidth, fieldHeight);\n\n            // Birthday Month\n            birthdayMonthLabel.setFont(labelFont);\n            birthdayMonthLabel.setForeground(textColor);\n            birthdayMonthLabel.setBounds(startX, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Day\n            birthdayDayLabel.setFont(labelFont);\n            birthdayDayLabel.setForeground(textColor);\n            birthdayDayLabel.setBounds(startX + 30, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Year\n            birthdayYearLabel.setFont(labelFont);\n            birthdayYearLabel.setForeground(textColor);\n            birthdayYearLabel.setBounds(startX + 60, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Friends Only\n            if (friendsOnlyLabel.getText().equals(\"true\")) {\n                ImageIcon appIcon = new ImageIcon(\"C:/Users/peter/Github/CS180Team-Project/images/icons8-lock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            } else {\n                ImageIcon appIcon = new ImageIcon(\n                        \"C:/Users/peter/Github/CS180Team-Project/images/icons8-unlock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            }\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            // After birthday section:\n            // Button styling\n            Color instagramBlue = new Color(0, 149, 246);\n            int buttonWidth = 270; // Wider rectangle\n            int buttonHeight = 35;\n            int buttonGap = 10;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // Create Add Friend button\n            addFriendButton = new RoundedButton(\"Add Friend\", 16);\n            addFriendButton.setBackground(instagramBlue);\n            addFriendButton.setForeground(Color.WHITE);\n            addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            addFriendButton.setBounds(startX - 5, buttonsY, buttonWidth, buttonHeight);\n            addFriendButton.setFocusPainted(false);\n\n            // Create Block button\n            blockButton = new RoundedButton(\"Block\", 16);\n            blockButton.setBackground(instagramBlue);\n            blockButton.setForeground(Color.WHITE);\n            blockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            blockButton.setBounds(startX + buttonWidth + buttonGap - 10, buttonsY, buttonWidth, buttonHeight);\n            blockButton.setFocusPainted(false);\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n            String photosInfo = client.accessPhotosFromUser(username);\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < imagePaths.length; i++) {\n                imagePaths[i] = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n            }\n            if (photos[0].contains(\",\")) {\n                if (photos.length < 6) {\n                    for (int i = 0; i < photos.length; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                } else {\n                    for (int i = 0; i < 6; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n            this.add(blackBackground);\n            this.add(gridPanel);\n            this.add(addFriendButton);\n            this.add(blockButton);\n            this.add(messagesNumber);\n            this.add(messagesLabel);\n            this.add(friendsNumber);\n            this.add(friendsLabel);\n            this.add(blockedNumber);\n            this.add(blockedLabel);\n            this.add(fullNameLabel);\n            this.add(firstNameLabel);\n            this.add(lastNameLabel);\n            this.add(bioLabel);\n            this.add(birthdayMonthLabel);\n            this.add(birthdayDayLabel);\n            this.add(birthdayYearLabel);\n            this.add(blackBackground);\n            this.setMaximumSize(new Dimension(screenSize.width, screenSize.height));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public ProfilePanel(String profile, String photosInfo) {\n        try {\n            this.setLayout(null);\n            char groupSeparator = (char) 29;\n            String[] profileInfo = profile.split(groupSeparator + \"\");\n            this.usernameLabel = new JLabel(profileInfo[0]);\n            profilePic = new JLabel(profileInfo[5].substring(profileInfo[5].indexOf(\":\") + 2));\n            JLabel pic = new JLabel(profilePic.getText());\n            if (pic.getText().equals(\"profile.png\") || profilePic.getText().isEmpty() || profilePic.getText().equals(\"\")) {\n                pic.setText(\"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\");\n            }\n            firstNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim());\n            lastNameLabel = new JLabel(profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            bioLabel = new JLabel(profileInfo[3].substring(profileInfo[3].indexOf(\":\") + 1).trim());\n            String birthday = profileInfo[4].substring(profileInfo[4].indexOf(\":\") + 1).trim();\n            String[] birthdayParts = birthday.split(\"/\");\n            birthdayMonthLabel = new JLabel(birthdayParts[0]);\n            birthdayDayLabel = new JLabel(birthdayParts[1]);\n            birthdayYearLabel = new JLabel(birthdayParts[2]);\n            friendsOnlyLabel = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(\":\") + 1));\n            // Get screen dimensions\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // Create and setup black background\n            JPanel blackBackground = new RoundedPanel(30);\n            blackBackground.setLayout(null);\n            blackBackground.setBackground(Color.BLACK);\n            int blackPanelWidth = (int) (screenSize.width * 0.6); // 60% width\n            blackBackground.setBounds(0, 10, blackPanelWidth, screenSize.height - 180);\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                    pic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            this.add(imagePanel);\n            Font labelFont = new Font(\"Monospaced\", Font.BOLD, 16);\n            Color textColor = Color.WHITE;\n            int fieldWidth = 400;\n            int fieldHeight = 30;\n            int startX = 50;\n            int startY = 250;\n            int verticalGap = 25;\n\n            // Full Name\n            JLabel fullNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim() + \" \"\n                    + profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            fullNameLabel.setFont(labelFont);\n            fullNameLabel.setForeground(textColor);\n            fullNameLabel.setBounds(startX, startY, fieldWidth, fieldHeight); // maybe change height to fieldHeight\n\n            // First Name\n            firstNameLabel.setFont(labelFont);\n            firstNameLabel.setForeground(textColor);\n            firstNameLabel.setBounds(startX, startY + verticalGap, fieldWidth, fieldHeight);\n\n            // Last Name\n            lastNameLabel.setFont(labelFont);\n            lastNameLabel.setForeground(textColor);\n            lastNameLabel.setBounds(startX, startY + (verticalGap * 2), fieldWidth, fieldHeight);\n\n            // Bio\n            bioLabel.setFont(labelFont);\n            bioLabel.setForeground(textColor);\n            bioLabel.setBounds(startX, startY + (verticalGap * 3), fieldWidth, fieldHeight);\n\n            // Birthday Month\n            birthdayMonthLabel.setFont(labelFont);\n            birthdayMonthLabel.setForeground(textColor);\n            birthdayMonthLabel.setBounds(startX, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Day\n            birthdayDayLabel.setFont(labelFont);\n            birthdayDayLabel.setForeground(textColor);\n            birthdayDayLabel.setBounds(startX + 30, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Year\n            birthdayYearLabel.setFont(labelFont);\n            birthdayYearLabel.setForeground(textColor);\n            birthdayYearLabel.setBounds(startX + 60, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Friends Only\n            if (friendsOnlyLabel.getText().equals(\"true\")) {\n                ImageIcon appIcon = new ImageIcon(\"C:/Users/peter/Github/CS180Team-Project/images/icons8-lock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            } else {\n                ImageIcon appIcon = new ImageIcon(\n                        \"C:/Users/peter/Github/CS180Team-Project/images/icons8-unlock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            }\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            // After birthday section:\n            // Button styling\n            Color instagramBlue = new Color(0, 149, 246);\n            int buttonWidth = 270; // Wider rectangle\n            int buttonHeight = 35;\n            int buttonGap = 10;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // Create Add Friend button\n            addFriendButton = new RoundedButton(\"Add Friend\", 16);\n            addFriendButton.setBackground(instagramBlue);\n            addFriendButton.setForeground(Color.WHITE);\n            addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            addFriendButton.setBounds(startX - 5, buttonsY, buttonWidth, buttonHeight);\n            addFriendButton.setFocusPainted(false);\n\n            // Create Block button\n            blockButton = new RoundedButton(\"Block\", 16);\n            blockButton.setBackground(instagramBlue);\n            blockButton.setForeground(Color.WHITE);\n            blockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            blockButton.setBounds(startX + buttonWidth + buttonGap - 10, buttonsY, buttonWidth, buttonHeight);\n            blockButton.setFocusPainted(false);\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < imagePaths.length; i++) {\n                imagePaths[i] = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n            }\n            if (photos[0].contains(\",\")) {\n                if (photos.length < 6) {\n                    for (int i = 0; i < photos.length; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                } else {\n                    for (int i = 0; i < 6; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n            this.add(blackBackground);\n            this.add(gridPanel);\n            this.add(addFriendButton);\n            this.add(blockButton);\n            this.add(messagesNumber);\n            this.add(messagesLabel);\n            this.add(friendsNumber);\n            this.add(friendsLabel);\n            this.add(blockedNumber);\n            this.add(blockedLabel);\n            this.add(fullNameLabel);\n            this.add(firstNameLabel);\n            this.add(lastNameLabel);\n            this.add(bioLabel);\n            this.add(birthdayMonthLabel);\n            this.add(birthdayDayLabel);\n            this.add(birthdayYearLabel);\n            this.add(blackBackground);\n            this.setMaximumSize(new Dimension(screenSize.width, screenSize.height));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public JButton[] getFriendAndBlockButtons() {\n        return new JButton[]{addFriendButton, blockButton};\n    }\n\n    public void createComponent(ArrayList<String> friendList, ArrayList<String> blockList) {\n        try {\n            char groupSeparator = (char) 29;\n            String profileInput = this.client.accessProfile();\n            String[] profileInfo = profileInput.split(groupSeparator + \"\");\n            profilePic = new JLabel(profileInfo[5].substring(profileInfo[5].indexOf(\":\") + 2));\n            firstNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim());\n            lastNameLabel = new JLabel(profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            bioLabel = new JLabel(profileInfo[3].substring(profileInfo[3].indexOf(\":\") + 1).trim());\n            String birthday = profileInfo[4].substring(profileInfo[4].indexOf(\":\") + 1).trim();\n            String[] birthdayParts = birthday.split(\"/\");\n            birthdayMonthLabel = new JLabel(birthdayParts[0]);\n            birthdayDayLabel = new JLabel(birthdayParts[1]);\n            birthdayYearLabel = new JLabel(birthdayParts[2]);\n            friendsOnlyLabel = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(\":\") + 1));\n            JLabel fullNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim() + \" \"\n                    + profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            JFrame frame = new JFrame(\"Edit Profile\");\n            // JDialog editDialog = new JDialog(frame, \"Edit Profile\", true);\n            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\n            JPanel mainPanel = new JPanel(null);\n            JPanel friendAndBlockPanel = new JPanel(null);\n            JPanel blackBackground = new RoundedPanel(30);\n            blackBackground.setBackground(Color.BLACK);\n            blackBackground.setBounds(0, 0, (int) (screenSize.width / 2.5), screenSize.height - 98);\n            JLabel pic = new JLabel(profilePic.getText());\n            if (pic.getText().equals(\"profile.png\")) {\n                pic.setText(\"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\");\n            }\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                    pic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            mainPanel.add(imagePanel);\n            Font labelFont = new Font(\"Monospaced\", Font.BOLD, 16);\n            Color textColor = Color.WHITE;\n            int fieldWidth = 400;\n            int fieldHeight = 30;\n            int startX = 50;\n            int startY = 250;\n            int verticalGap = 25;\n\n            // Setup friends and blocks lists.\n            RoundedTextField friendsText = new RoundedTextField(\"\", 50, 15);\n            friendsText.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n\n            RoundedTextField blocksText = new RoundedTextField(\"\", 50, 15);\n            blocksText.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n\n            if (friendList.size() > 0) {\n                String friendString = \"\";\n                for (String friend : friendList) {\n                    friendString += friend + \"\\n\";\n                }\n                friendsText.setText(friendString);\n            }\n\n            if (blockList.size() > 0) {\n                String blockString = \"\";\n                for (String block : blockList) {\n                    blockString += block + \"\\n\";\n                }\n                blocksText.setText(blockString);\n            }\n\n            // Full Name\n            fullNameLabel.setFont(labelFont);\n            fullNameLabel.setForeground(textColor);\n            fullNameLabel.setBounds(startX, startY, fieldWidth, fieldHeight); // maybe change height to fieldHeight\n\n            // First Name\n            firstNameLabel.setFont(labelFont);\n            firstNameLabel.setForeground(textColor);\n            firstNameLabel.setBounds(startX, startY + verticalGap, fieldWidth, fieldHeight);\n\n            // Last Name\n            lastNameLabel.setFont(labelFont);\n            lastNameLabel.setForeground(textColor);\n            lastNameLabel.setBounds(startX, startY + (verticalGap * 2), fieldWidth, fieldHeight);\n\n            // Bio\n            bioLabel.setFont(labelFont);\n            bioLabel.setForeground(textColor);\n            bioLabel.setBounds(startX, startY + (verticalGap * 3), fieldWidth, fieldHeight);\n\n            // Birthday Month\n            birthdayMonthLabel.setFont(labelFont);\n            birthdayMonthLabel.setForeground(textColor);\n            birthdayMonthLabel.setBounds(startX, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Day\n            birthdayDayLabel.setFont(labelFont);\n            birthdayDayLabel.setForeground(textColor);\n            birthdayDayLabel.setBounds(startX + 30, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Year\n            birthdayYearLabel.setFont(labelFont);\n            birthdayYearLabel.setForeground(textColor);\n            birthdayYearLabel.setBounds(startX + 60, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Friends Only\n            if (friendsOnlyLabel.getText().equals(\"true\")) {\n                ImageIcon appIcon = new ImageIcon(\"C:/Users/peter/Github/CS180Team-Project/images/icons8-lock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                mainPanel.add(iconLabel);\n            } else {\n                ImageIcon appIcon = new ImageIcon(\n                        \"C:/Users/peter/Github/CS180Team-Project/images/icons8-unlock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                mainPanel.add(iconLabel);\n            }\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            // After birthday section:\n            // Button styling\n            Color instagramBlue = new Color(0, 149, 246);\n            int buttonWidth = 270; // Wider rectangle\n            int buttonHeight = 35;\n            int buttonGap = 10;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // Create Add Friend button\n            RoundedButton addFriendButton = new RoundedButton(\"Add Friend\", 16);\n            addFriendButton.setBackground(instagramBlue);\n            addFriendButton.setForeground(Color.WHITE);\n            addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            addFriendButton.setBounds(startX - 5, buttonsY, buttonWidth, buttonHeight);\n            addFriendButton.setFocusPainted(false);\n\n            // Create Block button\n            RoundedButton blockButton = new RoundedButton(\"Block\", 16);\n            blockButton.setBackground(instagramBlue);\n            blockButton.setForeground(Color.WHITE);\n            blockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            blockButton.setBounds(startX + buttonWidth + buttonGap - 10, buttonsY, buttonWidth, buttonHeight);\n            blockButton.setFocusPainted(false);\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n            String photosInfo = client.accessPhotosFromUser(profileInfo[0]);\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < imagePaths.length; i++) {\n                imagePaths[i] = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n            }\n            if (photos.length < 6) {\n                for (int i = 0; i < photos.length; i++) {\n                    char gs = 29;\n                    String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                    imagePaths[i] = lmao[1];\n                }\n            } else {\n                for (int i = 0; i < 6; i++) {\n                    char gs = 29;\n                    String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                    imagePaths[i] = lmao[1];\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n\n            // Add grid panel to main panel\n            mainPanel.add(gridPanel);\n            mainPanel.add(addFriendButton);\n            mainPanel.add(blockButton);\n            mainPanel.add(messagesNumber);\n            mainPanel.add(messagesLabel);\n            mainPanel.add(friendsNumber);\n            mainPanel.add(friendsLabel);\n            mainPanel.add(blockedNumber);\n            mainPanel.add(blockedLabel);\n            mainPanel.add(fullNameLabel);\n            mainPanel.add(firstNameLabel);\n            mainPanel.add(lastNameLabel);\n            mainPanel.add(bioLabel);\n            mainPanel.add(birthdayMonthLabel);\n            mainPanel.add(birthdayDayLabel);\n            mainPanel.add(birthdayYearLabel);\n            mainPanel.add(blackBackground);\n            mainPanel.setPreferredSize(new Dimension(screenSize.width, screenSize.height));\n            // Set the size of the dialog\n            frame.setSize(screenSize.width, screenSize.height);\n            // Set frame to maximized state\n            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n\n            // Center the dialog\n            frame.setLocation(0, 0);\n\n            // Make the dialog visible\n            frame.setVisible(true);\n\n            // Add the panel and button to the dialog\n            friendAndBlockPanel.setBackground(Color.WHITE);\n            friendAndBlockPanel.setBounds((int) (screenSize.width / 2.5), 0, screenSize.width -\n                    (int) (screenSize.width / 2.5), screenSize.height);\n            mainPanel.add(friendAndBlockPanel);\n            frame.add(mainPanel);\n            //c.weightx = 0.3;\n            //c.gridx = 1;\n            //frame.add(friendAndBlockPanel, c);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void refreshProfile(String username, String firstName, String lastName, String bio, String month, String day,\n            String year,\n            String profilePic, String friendsOnly) {\n        usernameLabel.setText(username);\n        firstNameLabel.setText(firstName);\n        lastNameLabel.setText(lastName);\n        bioLabel.setText(bio);\n        birthdayMonthLabel.setText(month);\n        birthdayDayLabel.setText(day);\n        birthdayYearLabel.setText(year);\n        friendsOnlyLabel.setText(friendsOnly);\n    }\n\n    class RoundedTextField extends JTextField {\n        private int radius;\n\n        public RoundedTextField(String text, int columns, int radius) {\n            super(text, columns);\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            super.paintComponent(g);\n            g2.dispose();\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    public void editProfile(ActionListener saveCallback) {\n        try {\n            // TODO: add cancel button\n            // Create a new dialog to edit the profile\n            JFrame frame = new JFrame(\"Edit Profile\");\n            // JDialog editDialog = new JDialog(frame, \"Edit Profile\", true);\n            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n            JPanel mainPanel = new JPanel(null);\n            JPanel blackBackground = new RoundedPanel(30);\n            blackBackground.setBackground(Color.BLACK);\n            blackBackground.setBounds(0, 0, (int) (screenSize.width / 2.5), screenSize.height - 98);\n            char groupSeparator = (char) 29;\n            String profileInput = client.accessProfile();\n            String[] profileInfo = profileInput.split(groupSeparator + \"\");\n            profilePic = new JLabel(profileInfo[5].substring(profileInfo[5].indexOf(\":\") + 2));\n            JLabel pic = new JLabel(profilePic.getText());\n            if (pic.getText().equals(\"profile.png\")) {\n                pic.setText(\"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\");\n            }\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                    pic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            mainPanel.add(imagePanel);\n            Font labelFont = new Font(\"Monospaced\", Font.BOLD, 16);\n            Color textColor = Color.WHITE;\n            int fieldWidth = 400;\n            int fieldHeight = 30;\n            int startX = 50;\n            int startY = 250;\n            int verticalGap = 25;\n            // Full Name\n            JLabel fullNameStr = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim() + \" \"\n                    + profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            JLabel firstNameStr = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim());\n            JLabel lastNameStr = new JLabel(profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            JLabel bioStr = new JLabel(profileInfo[3].substring(profileInfo[3].indexOf(\":\") + 1).trim());\n            String birthday = profileInfo[4].substring(profileInfo[4].indexOf(\":\") + 1).trim();\n            String[] birthdayParts = birthday.split(\"/\");\n            JLabel birthdayMonthStr = new JLabel(birthdayParts[0]);\n            JLabel birthdayDayStr = new JLabel(birthdayParts[1]);\n            JLabel birthdayYearStr = new JLabel(birthdayParts[2]);\n            JLabel friendsOnlyStr = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(\":\") + 1));\n            // Full Name\n            JLabel fullNameLabel = new JLabel(fullNameStr.getText());\n            fullNameLabel.setFont(labelFont);\n            fullNameLabel.setForeground(textColor);\n            fullNameLabel.setBounds(startX, startY, fieldWidth, fieldHeight); // maybe change height to fieldHeight\n\n            // First Name\n            JLabel firstNameLabel = new JLabel(firstNameStr.getText());\n            firstNameLabel.setFont(labelFont);\n            firstNameLabel.setForeground(textColor);\n            firstNameLabel.setBounds(startX, startY + verticalGap, fieldWidth, fieldHeight);\n\n            // Last Name\n            JLabel lastNameLabel = new JLabel(lastNameStr.getText());\n            lastNameLabel.setFont(labelFont);\n            lastNameLabel.setForeground(textColor);\n            lastNameLabel.setBounds(startX, startY + (verticalGap * 2), fieldWidth, fieldHeight);\n\n            // Bio\n            JLabel bioLabel = new JLabel(bioStr.getText());\n            bioLabel.setFont(labelFont);\n            bioLabel.setForeground(textColor);\n            bioLabel.setBounds(startX, startY + (verticalGap * 3), fieldWidth, fieldHeight);\n\n            // Birthday Month\n            JLabel birthdayMonthLabel = new JLabel(birthdayMonthStr.getText());\n            birthdayMonthLabel.setFont(labelFont);\n            birthdayMonthLabel.setForeground(textColor);\n            birthdayMonthLabel.setBounds(startX, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Day\n            JLabel birthdayDayLabel = new JLabel(birthdayDayStr.getText());\n            birthdayDayLabel.setFont(labelFont);\n            birthdayDayLabel.setForeground(textColor);\n            birthdayDayLabel.setBounds(startX + 30, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Year\n            JLabel  birthdayYearLabel = new JLabel(birthdayYearStr.getText());\n            birthdayYearLabel.setFont(labelFont);\n            birthdayYearLabel.setForeground(textColor);\n            birthdayYearLabel.setBounds(startX + 60, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Friends Only\n            JLabel friendsOnlyLabel = new JLabel(friendsOnlyStr.getText());\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            // After birthday section:\n            // Button styling\n            Color instagramBlue = new Color(0, 149, 246);\n            int buttonWidth = 270; // Wider rectangle\n            int buttonHeight = 35;\n            int buttonGap = 10;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // Create Add Friend button\n            RoundedButton addFriendButton = new RoundedButton(\"Add Friend\", 16);\n            addFriendButton.setBackground(instagramBlue);\n            addFriendButton.setForeground(Color.WHITE);\n            addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            addFriendButton.setBounds(startX - 5, buttonsY, buttonWidth, buttonHeight);\n            addFriendButton.setFocusPainted(false);\n\n            // Create Block button\n            RoundedButton blockButton = new RoundedButton(\"Block\", 16);\n            blockButton.setBackground(instagramBlue);\n            blockButton.setForeground(Color.WHITE);\n            blockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            blockButton.setBounds(startX + buttonWidth + buttonGap - 10, buttonsY, buttonWidth, buttonHeight);\n            blockButton.setFocusPainted(false);\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n            String photosInfo = client.accessPhotosFromUser(profileInfo[0]);\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < imagePaths.length; i++) {\n                imagePaths[i] = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n            }\n            if (photos.length < 6) {\n                for (int i = 0; i < photos.length; i++) {\n                    char gs = 29;\n                    String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                    imagePaths[i] = lmao[1];\n                }\n            } else {\n                for (int i = 0; i < 6; i++) {\n                    char gs = 29;\n                    String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                    imagePaths[i] = lmao[1];\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n\n            // Add grid panel to main panel\n            mainPanel.add(gridPanel);\n            // Create right panel for editing fields\n            JPanel rightPanel = new JPanel(new GridBagLayout());\n            rightPanel.setBackground(Color.WHITE);\n            rightPanel.setBounds((int) (screenSize.width / 2.5), 0, screenSize.width - (int) (screenSize.width / 2.5),\n                    screenSize.height);\n            mainPanel.add(rightPanel);\n\n            GridBagConstraints gbc = new GridBagConstraints();\n            gbc.insets = new Insets(10, 10, 10, 10);\n            gbc.gridx = 0;\n            gbc.gridy = 0;\n            gbc.anchor = GridBagConstraints.WEST;\n\n            String currentFullName = fullNameStr.getText();\n            String currentFirstName = firstNameStr.getText();\n            String currentLastName = lastNameStr.getText();\n            String currentBio = bioStr.getText();\n            String currentBirthdayMonth = birthdayMonthStr.getText();\n            String currentBirthdayDay = birthdayDayStr.getText();\n            String currentBirthdayYear = birthdayYearStr.getText();\n            String currentFriendsOnly = friendsOnlyStr.getText();\n            // Full Name\n            JLabel fullName = new JLabel(\"Full Name:\");\n            fullName.setPreferredSize(new Dimension(200, 30));\n            rightPanel.add(fullName, gbc);\n            gbc.gridx = 1;\n            RoundedTextField fullNameField = new RoundedTextField(currentFullName, 20, 15);\n            rightPanel.add(fullNameField, gbc);\n\n            // First Name\n            gbc.gridx = 0; // Reset to first column\n            gbc.gridy++;\n            JLabel firstName = new JLabel(\"First Name:\");\n            firstName.setPreferredSize(new Dimension(200, 30));\n            rightPanel.add(firstName, gbc);\n            gbc.gridx = 1;\n            RoundedTextField firstNameField = new RoundedTextField(currentFirstName, 20, 15); // Set current value and\n                                                                                              // rounded corners\n            rightPanel.add(firstNameField, gbc);\n\n            // Last Name\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel lastName = new JLabel(\"Last Name:\");\n            lastName.setPreferredSize(new Dimension(200, 30)); // Increased width\n            rightPanel.add(lastName, gbc);\n            gbc.gridx = 1;\n            RoundedTextField lastNameField = new RoundedTextField(currentLastName, 20, 15);\n            rightPanel.add(lastNameField, gbc);\n\n            // Bio\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel bio = new JLabel(\"Bio:\");\n            bio.setPreferredSize(new Dimension(200, 30)); // Increased width\n            rightPanel.add(bio, gbc);\n            gbc.gridx = 1;\n            RoundedTextField bioField = new RoundedTextField(currentBio, 20, 15);\n            rightPanel.add(bioField, gbc);\n\n            // Birthday\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel birthdayMonth = new JLabel(\"Birth Month:\");\n            birthdayMonth.setPreferredSize(new Dimension(200, 30)); // Increased width\n            rightPanel.add(birthdayMonth, gbc);\n            gbc.gridx = 1;\n            RoundedTextField birthdayFieldMonth = new RoundedTextField(currentBirthdayMonth, 20, 15);\n            rightPanel.add(birthdayFieldMonth, gbc);\n\n            // Birthday\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel birthdayDay = new JLabel(\"Birth Day:\");\n            birthdayDay.setPreferredSize(new Dimension(200, 30)); // Increased width\n            rightPanel.add(birthdayDay, gbc);\n            gbc.gridx = 1;\n            RoundedTextField birthdayFieldDay = new RoundedTextField(currentBirthdayDay, 20, 15);\n            rightPanel.add(birthdayFieldDay, gbc);\n\n            // Birthday\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel birthdayYear = new JLabel(\"Birth Year:\");\n            birthdayYear.setPreferredSize(new Dimension(200, 30)); // Increased width\n            rightPanel.add(birthdayYear, gbc);\n            gbc.gridx = 1;\n            RoundedTextField birthdayFieldYear = new RoundedTextField(currentBirthdayYear, 20, 15);\n            rightPanel.add(birthdayFieldYear, gbc);\n\n            // Profile Picture\n            JButton browseButton = new JButton(\"Browse Files\");\n            browseButton.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    JFileChooser fileChooser = new JFileChooser();\n                    fileChooser.setFileFilter(new FileNameExtensionFilter(\n                            \"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\"));\n\n                    int result = fileChooser.showOpenDialog(null);\n                    if (result == JFileChooser.APPROVE_OPTION) {\n                        File selectedFile = fileChooser.getSelectedFile();\n                        pic.setText(selectedFile.getPath());\n                        // Update existing panel instead of creating new one\n                        imagePanel.updateImage(selectedFile.getPath(), 150);\n\n                        // Ensure proper bounds and visibility\n                        imagePanel.setBounds(40, 80, 150, 150);\n\n                        // Force container to refresh\n                        // mainPanel.revalidate();\n                        mainPanel.repaint();\n                    }\n                }\n            });\n\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel profilePicture = new JLabel(\"Profile Picture: \");\n            profilePicture.setPreferredSize(new Dimension(200, 30));\n            rightPanel.add(profilePicture, gbc);\n            gbc.gridx = 1;\n            rightPanel.add(browseButton, gbc);\n\n            // Friends Only\n            gbc.gridx = 0;\n            gbc.gridy++;\n            JLabel friendsOnly = new JLabel(\"Messages limited to friends:\");\n            friendsOnly.setPreferredSize(new Dimension(200, 30)); // Increased width\n            rightPanel.add(friendsOnly, gbc);\n            gbc.gridx = 1;\n            JCheckBox friendsOnlyCheckBox = new JCheckBox();\n            if (currentFriendsOnly.equals(\"true\")) {\n                friendsOnlyCheckBox.setSelected(true);\n            } else {\n                friendsOnlyCheckBox.setSelected(false);\n            }\n            rightPanel.add(friendsOnlyCheckBox, gbc);\n\n            // Add listeners to update profile on the left in real-time\n\n            // Add listeners to update profile on the left in real-time\n            fullNameField.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    fullNameLabel.setText(fullNameField.getText());\n                }\n            });\n\n            firstNameField.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    firstNameLabel.setText(firstNameField.getText());\n                }\n            });\n\n            lastNameField.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    lastNameLabel.setText(lastNameField.getText());\n                }\n            });\n\n            bioField.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    bioLabel.setText(bioField.getText());\n                }\n            });\n\n            birthdayFieldMonth.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    birthdayMonthLabel.setText(birthdayFieldMonth.getText());\n                }\n            });\n\n            birthdayFieldDay.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    birthdayDayLabel.setText(birthdayFieldDay.getText());\n                }\n            });\n\n            birthdayFieldYear.getDocument().addDocumentListener(new DocumentListener() {\n                @Override\n                public void changedUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void removeUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                @Override\n                public void insertUpdate(DocumentEvent e) {\n                    updateProfile();\n                }\n\n                public void updateProfile() {\n                    birthdayYearLabel.setText(birthdayFieldYear.getText());\n                }\n            });\n            firstNameField.setPreferredSize(new Dimension(400, 50)); // Increased size\n            lastNameField.setPreferredSize(new Dimension(400, 50)); // Increased size\n            bioField.setPreferredSize(new Dimension(400, 50)); // Increased size\n            birthdayFieldMonth.setPreferredSize(new Dimension(400, 50)); // Increased size\n            birthdayFieldDay.setPreferredSize(new Dimension(400, 50)); // Increased size\n            birthdayFieldYear.setPreferredSize(new Dimension(400, 50)); // Increased size\n\n            friendsOnlyCheckBox.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    friendsOnlyLabel.setText(friendsOnlyCheckBox.isSelected() ? \"Yes\" : \"No\");\n                }\n            });\n\n            // Add buttons to panel\n            mainPanel.add(addFriendButton);\n            mainPanel.add(blockButton);\n            mainPanel.add(messagesNumber);\n            mainPanel.add(messagesLabel);\n            mainPanel.add(friendsNumber);\n            mainPanel.add(friendsLabel);\n            mainPanel.add(blockedNumber);\n            mainPanel.add(blockedLabel);\n            mainPanel.add(fullNameLabel);\n            mainPanel.add(firstNameLabel);\n            mainPanel.add(lastNameLabel);\n            mainPanel.add(bioLabel);\n            mainPanel.add(birthdayMonthLabel);\n            mainPanel.add(birthdayDayLabel);\n            mainPanel.add(birthdayYearLabel);\n            mainPanel.add(blackBackground);\n            mainPanel.setPreferredSize(new Dimension(screenSize.width, screenSize.height));\n            // Add the panel and button to the dialog\n            frame.add(mainPanel);\n\n            // Create a button to save the changes\n            RoundedButton saveButton = new RoundedButton(\"Save\", 16);\n            saveButton.setBackground(instagramBlue);\n            saveButton.setForeground(Color.WHITE);\n            saveButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            saveButton.setBounds(40, buttonsY + buttonHeight + 20, buttonWidth, buttonHeight); // Position below the //\n                                                                                               // other buttons\n            saveButton.setFocusPainted(false);\n            saveButton.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent e) {\n                    // Save the changes\n                    char groupSeparator = (char) 29;\n                    String content = usernameLabel.getText().trim() + groupSeparator +\n                            firstNameField.getText().trim() +\n                            groupSeparator + lastNameField.getText().trim() + groupSeparator +\n                            bioField.getText().trim() +\n                            groupSeparator + birthdayFieldMonth.getText().trim() + \"/\" +\n                            birthdayFieldDay.getText().trim()\n                            + \"/\" + birthdayFieldYear.getText().trim() + groupSeparator + pic.getText() +\n                            groupSeparator +\n                            ((Boolean) friendsOnlyCheckBox.isSelected()).toString().trim();\n                    try {\n                        if (client.saveProfile(content)) {\n                            firstNameLabel.setText(firstNameField.getText().trim());\n                            lastNameLabel.setText(lastNameField.getText().trim());\n                            bioLabel.setText(bioField.getText().trim());\n                            birthdayMonthLabel.setText(birthdayFieldMonth.getText().trim());\n                            birthdayDayLabel.setText(birthdayFieldDay.getText().trim());\n                            birthdayYearLabel.setText(birthdayFieldYear.getText().trim());\n                            pic.setText(profilePic.getText());\n                            friendsOnlyLabel.setText(((Boolean) friendsOnlyCheckBox.isSelected()).toString().trim());\n                            // Close the dialog\n                            if (saveCallback != null) {\n                                saveCallback.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"Save\"));\n                            }\n                            frame.dispose();\n                        } else {\n                            // Show an error message\n                            JOptionPane.showMessageDialog(null, \"Invalid profile information, \" +\n                                    \"try again\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                        }\n                    } catch (IOException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            });\n            // frame.add(editPanel, BorderLayout.CENTER);\n            frame.add(saveButton, BorderLayout.SOUTH);\n\n            // Set the size of the dialog\n            frame.setSize(screenSize.width, screenSize.height);\n            // Set frame to maximized state\n            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n\n            // Center the dialog\n            frame.setLocation(0, 0);\n\n            // Make the dialog visible\n            frame.setVisible(true);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class RoundedScrollPane extends JScrollPane {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedScrollPane(Component view, int radius) {\n            super(view);\n            this.radius = radius;\n            setOpaque(false);\n            setBorder(BorderFactory.createEmptyBorder());\n\n            // Style the scrollbars\n            getVerticalScrollBar().setUI(new BasicScrollBarUI() {\n                @Override\n                protected void configureScrollBarColors() {\n                    this.thumbColor = new Color(200, 200, 200);\n                    this.trackColor = new Color(245, 245, 245);\n                }\n\n                @Override\n                protected JButton createDecreaseButton(int orientation) {\n                    return createZeroButton();\n                }\n\n                @Override\n                protected JButton createIncreaseButton(int orientation) {\n                    return createZeroButton();\n                }\n\n                private JButton createZeroButton() {\n                    JButton button = new JButton();\n                    button.setPreferredSize(new Dimension(0, 0));\n                    return button;\n                }\n            });\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n\n            // Set rendering hints\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\n            // Fill background\n            if (backgroundColor != null) {\n                g2.setColor(backgroundColor);\n            } else {\n                g2.setColor(getBackground());\n            }\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n\n            g2.dispose();\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(new Color(200, 200, 200));\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedJList<E> extends JList<E> {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedJList(int radius) {\n            super();\n            this.radius = radius;\n            init();\n        }\n\n        public RoundedJList(ListModel<E> model, int radius) {\n            super(model);\n            this.radius = radius;\n            init();\n        }\n\n        private void init() {\n            setOpaque(false);\n            setCellRenderer(new DefaultListCellRenderer() {\n                @Override\n                public Component getListCellRendererComponent(JList<?> list, Object value,\n                        int index, boolean isSelected, boolean cellHasFocus) {\n                    Component c = super.getListCellRendererComponent(list, value,\n                            index, isSelected, cellHasFocus);\n\n                    if (isSelected) {\n                        setBackground(new Color(0, 149, 246, 50));\n                        setForeground(Color.BLACK);\n                    } else {\n                        setBackground(list.getBackground());\n                        setForeground(list.getForeground());\n                    }\n\n                    setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));\n                    return c;\n                }\n            });\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\n            // Fill background\n            if (backgroundColor != null) {\n                g2.setColor(backgroundColor);\n            } else {\n                g2.setColor(getBackground());\n            }\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n\n            g2.dispose();\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(new Color(200, 200, 200));\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ProfilePanel.java b/src/main/java/ProfilePanel.java
--- a/src/main/java/ProfilePanel.java	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/src/main/java/ProfilePanel.java	(date 1733505027779)
@@ -771,7 +771,7 @@
             friendsOnlyLabel = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(":") + 1));
             JLabel fullNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(":") + 1).trim() + " "
                     + profileInfo[2].substring(profileInfo[2].indexOf(":") + 1).trim());
-            JFrame frame = new JFrame("Edit Profile");
+            JFrame frame = new JFrame("My Profile");
             // JDialog editDialog = new JDialog(frame, "Edit Profile", true);
             frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
             Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
@@ -959,8 +959,8 @@
             String photosInfo = client.accessPhotosFromUser(profileInfo[0]);
             String[] photos = photosInfo.split(",");
             String[] imagePaths = new String[6];
-            for (int i = 0; i < imagePaths.length; i++) {
-                imagePaths[i] = "C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg";
+            for (int i = 0; i < photos.length && i < imagePaths.length; i++) {
+                imagePaths[i] = photos[i];
             }
             if (photos.length < 6) {
                 for (int i = 0; i < photos.length; i++) {
Index: src/main/java/chatPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.event.*;\nimport java.io.IOException;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.text.SimpleDateFormat;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport javax.swing.plaf.basic.BasicScrollBarUI;\nimport javax.swing.text.DefaultCaret;\n\npublic class chatPanel extends JPanel {\n    private RoundedTextArea messageHistoryArea; // prior texts display\n    private RoundedScrollPane scrollPane; // pane storing messageHistoryArea\n    private RoundedTextField messageInputField; // text box to send message\n    private JList<String> currentMessages;\n    private RoundedButton sendButton; // send message button\n    private Client client; // client object\n    private String selectedUser; // The desired user to chat with\n\n    public chatPanel(Client client) {\n        this.client = client;\n        this.setPreferredSize(new Dimension(400, 500));\n\n        // Add margins to create space on right\n        this.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 30));\n\n        this.setLayout(new BorderLayout(5, 10));\n        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        setVisible(true);\n\n        messageHistoryArea = new RoundedTextArea(15);\n        messageHistoryArea.setEditable(false);\n        messageHistoryArea.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n        DefaultCaret caret = (DefaultCaret) messageHistoryArea.getCaret();\n        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);\n\n        scrollPane = new RoundedScrollPane(messageHistoryArea, 15);\n        this.add(scrollPane, BorderLayout.CENTER);\n\n        JPanel inputPanel = new JPanel(new BorderLayout());\n        messageInputField = new RoundedTextField(\"\", 20, 15);\n        messageInputField.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n        sendButton = new RoundedButton(\"Send\", 15);\n        sendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        sendButton.setBackground(new Color(0, 149, 246));\n        sendButton.setForeground(Color.WHITE);\n        sendButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));\n\n        inputPanel.add(messageInputField, BorderLayout.CENTER);\n        inputPanel.add(sendButton, BorderLayout.EAST);\n        this.add(inputPanel, BorderLayout.SOUTH);\n\n        sendButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    sendMessage();\n                } catch (Exception bruh) {\n                    // TODO: handle exception\n                }\n            }\n        });\n    }\n\n    /**\n     * Refreshes the message history area with messages between the current user\n     * and the selected user.\n     */\n    public void refreshChat(String selectedUser) throws IOException {\n        this.selectedUser = selectedUser;\n        String chatHistory = client.getChat(selectedUser);\n\n        if (chatHistory == null || chatHistory.isEmpty()) {\n            messageHistoryArea.setText(\" No messages yet with \" + selectedUser + \".\");\n            return;\n        }\n\n        String[][] messages = getMessageHistory(chatHistory);\n        StringBuilder message = new StringBuilder();\n        for (int i = messages.length - 1; i > -1; i--) {\n            message.append(\" \");\n            message.append(getMessageTime(messages[i][0]));\n            message.append(\" \");\n            message.append(messages[i][1] + \": \" + messages[i][2] + \"\\n\");\n        }\n\n        messageHistoryArea.setText(message.toString());\n    }\n\n    private String[][] getMessageHistory(String messageContent) {\n        if (messageContent == null || messageContent.isEmpty()) {\n            return null;\n        }\n        ArrayList<String[]> messageHistory = new ArrayList<String[]>();\n        while (messageContent.contains(\"\" + (char) 29)) {\n            messageContent = messageContent.substring(0, messageContent.lastIndexOf((char) 29));\n            // Adds the parts of a message (time, user, content) to an array length 3\n            if (messageContent.contains(\"\" + (char) 29)) {\n                String[] content = new String[3];\n                String currentMessage = messageContent.substring(messageContent.lastIndexOf((char) 29) + 1);\n                content[0] = currentMessage.substring(0, currentMessage.indexOf((':')));\n                currentMessage = currentMessage.substring(currentMessage.indexOf((':')) + 1);\n                content[1] = currentMessage.substring(0, currentMessage.indexOf((':')));\n                currentMessage = currentMessage.substring(currentMessage.indexOf((':')) + 1);\n                content[2] = currentMessage;\n                messageHistory.add(content);\n            }\n        }\n        // Adds the final message.\n        String[] content = new String[3];\n        content[0] = messageContent.substring(0, messageContent.indexOf((':')));\n        messageContent = messageContent.substring(messageContent.indexOf((':')) + 1);\n        content[1] = messageContent.substring(0, messageContent.indexOf((':')));\n        messageContent = messageContent.substring(messageContent.indexOf((':')) + 1);\n        content[2] = messageContent;\n        messageHistory.add(content);\n        // Return the 2d array of messages.\n        return messageHistory.toArray(new String[messageHistory.size()][]);\n    }\n\n    private String getMessageTime(String timeLong) {\n        Message msg = new Message(\"temp\", \"temp\", Long.parseLong(timeLong));\n        Date currTime = Date.from(Instant.now());\n        Date msgTime = msg.getTimeStamp();\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyDDD\");\n        SimpleDateFormat timeFormat = new SimpleDateFormat(\"h:mm a\");\n        if (dateFormat.format(currTime).equals(dateFormat.format(msgTime))) {\n            return timeFormat.format(msgTime);\n        }\n        int currYearDay = Integer.parseInt(dateFormat.format(currTime));\n        int msgYearDay = Integer.parseInt(dateFormat.format(msgTime));\n        if (msgYearDay == currYearDay - 1) {\n            return \"Yesterday\";\n        }\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.DAY_OF_YEAR, msgYearDay);\n        SimpleDateFormat dayOfWeekFormat = new SimpleDateFormat(\"EEEE\");\n        if (((currYearDay - 7) < msgYearDay) && (msgYearDay < (currYearDay - 1))) {\n            return dayOfWeekFormat.format(calendar.getTime());\n        }\n        SimpleDateFormat dateFormat1 = new SimpleDateFormat(\"d MMM yyyy\");\n        calendar.set(Calendar.DAY_OF_YEAR, msgYearDay);\n        return dateFormat1.format(calendar.getTime());\n    }\n\n    /**\n     * sends a message to the selected user and updates the chat history.\n     */\n    private void sendMessage() throws IOException {\n        String message = messageInputField.getText().trim();\n        if (!message.isEmpty() && selectedUser != null) {\n            String result = Boolean.toString(client.sendMessage(selectedUser + (char) 29 + message)); // group separator\n                                                                                                      // char\n            if (\"true\".equals(result)) {\n                refreshChat(selectedUser); // refresh chat after successful message send\n                messageInputField.setText(\"\"); // clears input field\n            } else {\n                messageInputField.setText(\"\");\n                JOptionPane.showMessageDialog(this, \"Failed to send message.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n            }\n        }\n    }\n\n    /**\n     * Displays a message in the chat panel.\n     */\n    public void displayMessage(String message) {\n        messageHistoryArea.append(\"\\n\" + message);\n        messageHistoryArea.setCaretPosition(messageHistoryArea.getDocument().getLength()); // Auto-scroll to bottom\n    }\n\n    public void refreshChatAutoScroll(String selectedUser) throws IOException {\n        DefaultCaret caret = (DefaultCaret) messageHistoryArea.getCaret();\n        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n        refreshChat(selectedUser);\n        caret = (DefaultCaret) messageHistoryArea.getCaret();\n        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);\n    }\n\n    class RoundedTextField extends JTextField {\n        private int radius;\n\n        public RoundedTextField(String text, int columns, int radius) {\n            super(text, columns);\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            super.paintComponent(g);\n            g2.dispose();\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedLabel extends JLabel {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedLabel(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            if (backgroundColor != null) {\n                Graphics2D g2 = (Graphics2D) g.create();\n                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g2.setColor(backgroundColor);\n                g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n                g2.dispose();\n            }\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    // Usage:\n    // RoundedLabel label = new RoundedLabel(\"Text\", 15);\n    // label.setBackground(new Color(245, 245, 245));\n    private static class RoundedButton extends JButton {\n        private Color backgroundColor;\n        private Color hoverBackgroundColor;\n        private Color pressedBackgroundColor;\n        private int radius;\n        private boolean isHovered = false;\n        private boolean isPressed = false;\n\n        public RoundedButton(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setContentAreaFilled(false);\n            setFocusPainted(false);\n            setBorderPainted(false);\n            setOpaque(false);\n\n            // Add hover effect\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseEntered(MouseEvent e) {\n                    isHovered = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseExited(MouseEvent e) {\n                    isHovered = false;\n                    repaint();\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    isPressed = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseReleased(MouseEvent e) {\n                    isPressed = false;\n                    repaint();\n                }\n            });\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            // Get current background color\n            Color background = getBackground();\n            if (isPressed) {\n                background = background.darker();\n            } else if (isHovered) {\n                background = background.brighter();\n            }\n\n            g2.setColor(background);\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            super.paintComponent(g);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedTextArea extends JTextArea {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedTextArea(int radius) {\n            super();\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        public RoundedTextArea(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n\n            // Set rendering hints\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\n            // Fill background\n            if (backgroundColor != null) {\n                g2.setColor(backgroundColor);\n            } else {\n                g2.setColor(getBackground());\n            }\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n\n            // Draw border\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            g2.dispose();\n\n            // Paint text\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            // Don't paint default border\n        }\n\n    }\n\n    private static class RoundedScrollPane extends JScrollPane {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedScrollPane(Component view, int radius) {\n            super(view);\n            this.radius = radius;\n            setOpaque(false);\n            setBorder(BorderFactory.createEmptyBorder());\n\n            // Style the scrollbars\n            getVerticalScrollBar().setUI(new BasicScrollBarUI() {\n                @Override\n                protected void configureScrollBarColors() {\n                    this.thumbColor = new Color(200, 200, 200);\n                    this.trackColor = new Color(245, 245, 245);\n                }\n\n                @Override\n                protected JButton createDecreaseButton(int orientation) {\n                    return createZeroButton();\n                }\n\n                @Override\n                protected JButton createIncreaseButton(int orientation) {\n                    return createZeroButton();\n                }\n\n                private JButton createZeroButton() {\n                    JButton button = new JButton();\n                    button.setPreferredSize(new Dimension(0, 0));\n                    return button;\n                }\n            });\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n\n            // Set rendering hints\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\n            // Fill background\n            if (backgroundColor != null) {\n                g2.setColor(backgroundColor);\n            } else {\n                g2.setColor(getBackground());\n            }\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n\n            g2.dispose();\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(new Color(200, 200, 200));\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    // Usage:\n    // RoundedScrollPane scrollPane = new RoundedScrollPane(messageHistoryArea, 15);\n    // scrollPane.setBackground(Color.WHITE);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/chatPanel.java b/src/main/java/chatPanel.java
--- a/src/main/java/chatPanel.java	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/src/main/java/chatPanel.java	(date 1733503266113)
@@ -9,6 +9,7 @@
 import java.util.Calendar;
 import java.util.Date;
 
+import javax.swing.border.EmptyBorder;
 import javax.swing.plaf.basic.BasicScrollBarUI;
 import javax.swing.text.DefaultCaret;
 
@@ -35,6 +36,8 @@
         messageHistoryArea = new RoundedTextArea(15);
         messageHistoryArea.setEditable(false);
         messageHistoryArea.setFont(new Font("Arial", Font.PLAIN, 14));
+        messageHistoryArea.setLineWrap(true);
+        messageHistoryArea.setBorder(new EmptyBorder(5, 5, 5, 5));
         DefaultCaret caret = (DefaultCaret) messageHistoryArea.getCaret();
         caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
 
Index: src/main/java/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.util.Scanner;\n\n/**\n * Class that handles all of the client-side functionality.\n *\n * @author William Thain, Fox Christiansen, Jackson Shields, Peter Bui: lab sec\n *         12\n *\n * @version Nov 2, 2024\n */\n// add methods to set first name, last name, bio, birthday, profile pic,\n// friends, blocks separately.\npublic class Client implements Runnable, ClientInterface {\n    public BufferedReader serverReader;\n    public PrintWriter serverWriter;\n    public Socket socket;\n    private String resultt; // for testing\n\n    public String getResult() {\n        return resultt;\n    }\n\n    public Client() throws IOException {\n        socket = new Socket(\"localhost\", 4242);\n        serverReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        serverWriter = new PrintWriter(socket.getOutputStream(), true);\n    }\n\n    public void run() {\n        boolean running = true;\n        while (running) {\n            try {\n                Scanner sc = new Scanner(System.in);\n                String line = sc.nextLine();\n                if (line == null) {\n                    break;\n                }\n                char groupSeparator = 29;\n                // take in the command that the GUI sends, differentiation by the word before\n                // the first colon\n                String command = line.substring(0, line.indexOf(':'));\n                // split the rest of the line into an array of arguments, separated by\n                // colons\n                String content = line.substring(line.indexOf(':') + 1);\n                String result = \"\";\n                switch (command) {\n                    case \"login\":\n                        // Login example: login:username[groupSeparator]password\n                        result = String.valueOf(login(content));\n                    case \"isLoggedIn\":\n                        // Is logged in example: isLoggedIn:\n                        result = String.valueOf(isLoggedIn());\n                        break;\n                    case \"register\":\n                        // Register example: register:username[groupSeparator]password\n                        result = String.valueOf(register(content));\n                        break;\n                    case \"getUserList\":\n                        // Get user list example: getUserList:\n                        result = getUserList();\n                        break;\n                    case \"getChat\":\n                        // Get chat example: getChat:username\n                        result = getChat(line);\n                        break;\n                    case \"getChatList\":\n                        // Get chat list example: getChatList:\n                        result = getChatList();\n                        break;\n                    case \"createChat\":\n                        // Create chat example: createChat:username\n                        result = String.valueOf(createChat(content));\n                        break;\n                    case \"sendMessage\":\n                        // Message example: sendMessage:username[groupSeparator]message\n                        result = String.valueOf(sendMessage(content));\n                        break;\n                    case \"deleteMessage\":\n                        // Delete message example:\n                        // deleteMessage[groupSeparator]message[groupSeparator]otherUser\n                        result = String.valueOf(deleteMessage(content));\n                        break;\n                    case \"accessProfile\":\n                        // Access profile example: accessProfile:\n                        result = accessProfile();\n                        break;\n                    case \"accessUserProfile\":\n                        // Access user profile example accessUserProfile:username\n                        result = accessUserProfile(content);\n                        break;\n                    case \"accessPhotosFromUser\":\n                        // Access photos from user example: accessPhotosFromUser:username\n                        result = accessPhotosFromUser(content);\n                        break;\n                    case \"saveProfile\":\n                        result = String.valueOf(saveProfile(content));\n                        break;\n                    case \"removeFriend\":\n                        // Remove friend example: removeFriend:friend\n                        result = String.valueOf(removeFriend(content));\n                        break;\n                    case \"addFriend\":\n                        // Add friend example: addFriend:friend\n                        result = String.valueOf(addFriend(content));\n                        break;\n                    case \"unblockUser\":\n                        // Unblock user example: unblockUser:user\n                        result = String.valueOf(unblockUser(content));\n                        break;\n                    case \"blockUser\":\n                        // Block user example: blockUser:user\n                        result = String.valueOf(blockUser(content));\n                        break;\n                    case \"deleteChat\":\n                        // Delete chat example: deleteChat:username\n                        result = String.valueOf(deleteChat(content));\n                        break;\n                    case \"sendImage\":\n                        // Send image example: sendImage:username[groupSeparator]imagePath\n                        result = String.valueOf(sendImage(content));\n                        break;\n                    case \"getBlockList\":\n                        // Get block list example: getBlockList:\n                        result = getBlockList();\n                        break;\n                    case \"getFriendList\":\n                        // Get friend list example: getFriendList:\n                        result = getFriendList();\n                        break;\n                    case \"isFriendsOnly\":\n                        // Is friends only example: isFriendsOnly:\n                        result = String.valueOf(isFriendsOnly());\n                        break;\n                    case \"setFriendsOnly\":\n                        // Set friends only example: setFriendsOnly:booleanValue\n                        result = String.valueOf(setFriendsOnly(content));\n                        break;\n                    case \"setProfilePic\":\n                        // Set profile pic example: setProfilePic:profilePicPath\n                        result = String.valueOf(setProfilePic(content));\n                        break;\n                    case \"getProfilePic\":\n                        // Get profile pic example: getProfilePic:\n                        result = getProfilePic();\n                        break;\n                    case \"logout\":\n                        result = String.valueOf(logout());\n                        break;\n                    case \"disconnect\":\n                        result = String.valueOf(disconnect());\n                        if (result.equals(\"true\")) {\n                            running = false;\n                        }\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid command: \" + command);\n                }\n                System.out.println(result);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    // Getusers\n\n    public String getUserList() throws IOException {\n        return requestData(\"getUserList: \");\n    }\n\n    public boolean sendMessage(String content) throws IOException {\n        String command = \"sendMessage:\" + content; //\n        return sendCommand(command);\n    }\n\n    public boolean deleteMessage(String content) throws IOException{\n        String command = \"deleteMessage:\" + content;\n        return sendCommand(command);\n    }\n\n    public String accessProfile() throws IOException {\n        return requestData(\"accessProfile: \");\n    }\n\n    public String accessUserProfile(String content) throws IOException {\n        String command = \"accessUserProfile:\" + content;\n        return requestData(command);\n    }\n\n    public String accessPhotosFromUser(String content) throws IOException {\n        String command = \"accessPhotosFromUser:\" + content;\n        return requestData(command);\n    }\n\n    public boolean saveProfile(String content) throws IOException {\n        String command = \"saveProfile:\" + content;\n        return sendCommand(command);\n    }\n\n    public boolean removeFriend(String friend) throws IOException{\n        String command = \"removeFriend:\" + friend;\n        return sendCommand(command);\n    }\n\n    public boolean addFriend(String friend) throws IOException {\n        String command = \"addFriend:\" + friend;\n        return sendCommand(command);\n    }\n\n    public boolean unblockUser(String user) throws IOException{\n        String command = \"unblockUser:\" + user;\n        return sendCommand(command);\n    }\n\n    public boolean blockUser(String otherUsername) throws IOException{\n        String command = \"blockUser:\" + otherUsername;\n        return sendCommand(command);\n    }\n\n    // the other user\n    public boolean deleteChat(String otherUser) throws IOException{\n        String command = \"deleteChat:\" + otherUser;\n        return sendCommand(command);\n    }\n\n    public boolean sendImage(String content) throws IOException{\n        String command = \"sendImage:\" + content;\n        return sendCommand(command);\n    }\n\n    public String getChat(String otherUsername) throws IOException {\n        String command = \"getChat:\" + otherUsername;\n        return requestData(command);\n    }\n\n    public String getChatList() throws IOException {\n        return requestData(\"getChatList: \");\n    }\n\n    public boolean createChat(String otherUsername) throws IOException{\n        String command = \"createChat:\" + otherUsername;\n        return sendCommand(command);\n    }\n\n    public String getFriendList() throws IOException {\n        return requestData(\"getFriendList: \");\n    }\n\n    public String getBlockList() throws IOException {\n        return requestData(\"getBlockList: \");\n    }\n\n    public boolean isFriendsOnly() throws IOException {\n        String command = \"isFriendsOnly: \";\n        return sendCommand(command);\n    }\n\n    public boolean setFriendsOnly(String booleanValue) throws IOException {\n        return sendCommand(\"setFriendsOnly:\" + booleanValue);\n    }\n\n    public boolean setProfilePic(String profilePic) throws IOException{\n        return sendCommand(\"setProfilePic:\" + profilePic);\n    }\n\n    public String getProfilePic() throws IOException {\n        return requestData(\"getProfilePic: \");\n    }\n\n    public boolean login(String content) throws IOException {\n        String command = \"login:\" + content;\n        return sendCommand(command);\n    }\n\n    public boolean isLoggedIn() throws IOException {\n        String command = \"isLoggedIn: \";\n        return sendCommand(command);\n    }\n\n    public boolean register(String content) throws IOException {\n        String command = \"register:\" + content;\n        return sendCommand(command);\n    }\n\n    public boolean logout() throws IOException {\n        return sendCommand(\"logout: \");\n    }\n\n    // May not be needed, potentially included in \"logout\".\n    public boolean disconnect() {\n        try {\n            if (socket != null && !socket.isClosed()) {\n                socket.close();\n            }\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public synchronized String requestData(String command) throws IOException {\n        if (!socket.isConnected()) {\n            throw new IOException(\"Socket is closed\");\n        }\n        serverWriter.println(command);\n        serverWriter.flush();\n        String response = serverReader.readLine();\n        if (response == null) {\n            throw new IOException(\"Socket is closed\");\n        }\n        return response;\n    }\n\n    public synchronized boolean sendCommand(String command) throws IOException {\n        String response = this.requestData(command);\n        return response != null && Boolean.parseBoolean(response.trim());\n    }\n\n    // IMPORTANT!! Command format is lowercase command name, colon (:), arguments\n    // seperated by colon (username:password).\n    // NO SPACES!!\n    // In addition, use the above functions to send and read the commands.\n    // Abstraction is good.\n    // format all remaining methods in this fashion\n\n    public boolean updateProfile(String content) throws IOException {\n        return sendCommand(\"updateProfile:\" + content);\n    }\n\n    public static void main(String[] args) {\n        try {\n            Thread t = new Thread(new Client());\n            t.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Client.java b/src/main/java/Client.java
--- a/src/main/java/Client.java	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/src/main/java/Client.java	(date 1733503715248)
@@ -85,6 +85,10 @@
                         // deleteMessage[groupSeparator]message[groupSeparator]otherUser
                         result = String.valueOf(deleteMessage(content));
                         break;
+                    case "getUsername":
+                        // Get username example getUsername:
+                        result = getUsername();
+                        break;
                     case "accessProfile":
                         // Access profile example: accessProfile:
                         result = accessProfile();
@@ -183,6 +187,10 @@
         return sendCommand(command);
     }
 
+    public String getUsername() throws IOException {
+        return requestData("getUsername: ");
+    }
+
     public String accessProfile() throws IOException {
         return requestData("accessProfile: ");
     }
Index: src/main/java/ChatListPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridLayout;\nimport java.awt.RenderingHints;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.time.Instant;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.DefaultListModel;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.ListCellRenderer;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.border.AbstractBorder;\nimport javax.swing.border.LineBorder;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.plaf.basic.BasicScrollBarUI;\n\n\n\npublic class ChatListPanel extends JPanel {\n    private boolean searching = false;\n    private JList<String> chatList;\n    private DefaultListModel<String> listModel;\n    private RoundedTextField searchField;\n    private Client client;\n\n    public ChatListPanel(Client client) {\n        this.client = client;\n        initializeComponents();\n        setupLayout();\n        addListeners();\n        setupStyling();\n    }\n    private static class RoundedScrollPane extends JScrollPane {\n    private int radius;\n    private Color backgroundColor;\n\n    public RoundedScrollPane(Component view, int radius) {\n        super(view);\n        this.radius = radius;\n        setOpaque(false);\n        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));        \n        // Style the scrollbars\n        getVerticalScrollBar().setUI(new BasicScrollBarUI() {\n            @Override\n            protected void configureScrollBarColors() {\n                this.thumbColor = new Color(200, 200, 200);\n                this.trackColor = new Color(245, 245, 245);\n            }\n            \n            @Override\n            protected JButton createDecreaseButton(int orientation) {\n                return createZeroButton();\n            }\n\n            @Override\n            protected JButton createIncreaseButton(int orientation) {\n                return createZeroButton();\n            }\n\n            private JButton createZeroButton() {\n                JButton button = new JButton();\n                button.setPreferredSize(new Dimension(0, 0));\n                return button;\n            }\n        });\n    }\n\n    @Override\n    public void setBackground(Color bg) {\n        this.backgroundColor = bg;\n        repaint();\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        Graphics2D g2 = (Graphics2D) g.create();\n        \n        // Set rendering hints\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n        \n        // Fill background\n        if (backgroundColor != null) {\n            g2.setColor(backgroundColor);\n        } else {\n            g2.setColor(getBackground());\n        }\n        g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n        \n        g2.dispose();\n        super.paintComponent(g);\n    }\n\n    @Override\n    protected void paintBorder(Graphics g) {\n        Graphics2D g2 = (Graphics2D) g.create();\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        g2.setColor(new Color(200, 200, 200));\n        g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n        g2.dispose();\n    }\n}\n\n    class RoundedTextField extends JTextField {\n        private int radius;\n\n        public RoundedTextField(String text, int columns, int radius) {\n            super(text, columns);\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            super.paintComponent(g);\n            g2.dispose();\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n    private static class RoundedLabel extends JLabel {\n        private int radius;\n        private Color backgroundColor;\n    \n        public RoundedLabel(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setOpaque(false);\n        }\n    \n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n    \n        @Override\n        protected void paintComponent(Graphics g) {\n            if (backgroundColor != null) {\n                Graphics2D g2 = (Graphics2D) g.create();\n                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                g2.setColor(backgroundColor);\n                g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n                g2.dispose();\n            }\n            super.paintComponent(g);\n        }\n    \n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n    \n    // Usage:\n    // RoundedLabel label = new RoundedLabel(\"Text\", 15);\n    // label.setBackground(new Color(245, 245, 245));\n    private static class RoundedButton extends JButton {\n        private Color backgroundColor;\n        private Color hoverBackgroundColor;\n        private Color pressedBackgroundColor;\n        private int radius;\n        private boolean isHovered = false;\n        private boolean isPressed = false;\n\n        public RoundedButton(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setContentAreaFilled(false);\n            setFocusPainted(false);\n            setBorderPainted(false);\n            setOpaque(false);\n\n            // Add hover effect\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseEntered(MouseEvent e) {\n                    isHovered = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseExited(MouseEvent e) {\n                    isHovered = false;\n                    repaint();\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    isPressed = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseReleased(MouseEvent e) {\n                    isPressed = false;\n                    repaint();\n                }\n            });\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            // Get current background color\n            Color background = getBackground();\n            if (isPressed) {\n                background = background.darker();\n            } else if (isHovered) {\n                background = background.brighter();\n            }\n\n            g2.setColor(background);\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            super.paintComponent(g);\n            g2.dispose();\n        }\n    }\n\n    \n    \n\n    \n\n\n    private void initializeComponents() {\n        // Initialize list model and chat list\n        listModel = new DefaultListModel<>();\n        chatList = new JList<>(listModel);\n        chatList.setCellRenderer(new ChatListCellRenderer());\n        chatList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n        // Create search field with placeholder\n        searchField = new RoundedTextField(\"\", 10, 15);\n        searchField.putClientProperty(\"RoundedTextField.placeholderText\", \"Search chats...\");\n    }\n\n    private void setupLayout() {\n        setLayout(new BorderLayout(0, 10));\n        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n\n        // Top panel for search and new chat button\n        JPanel topPanel = new JPanel(new BorderLayout(5, 0));\n        topPanel.add(searchField, BorderLayout.CENTER);\n\n        // Add components to main panel\n        add(topPanel, BorderLayout.NORTH);\n        add(new RoundedScrollPane(chatList,15), BorderLayout.CENTER);\n    }\n\n    private void setupStyling() {\n        // Panel styling\n        setBackground(Color.WHITE);\n        setPreferredSize(new Dimension(250, getHeight()));\n\n        // Search field styling\n        searchField.setPreferredSize(new Dimension(100, 30));\n        searchField.setBorder(BorderFactory.createCompoundBorder(\n            new LineBorder(new Color(200, 200, 200)),\n            BorderFactory.createEmptyBorder(5, 10, 5, 10)\n        ));\n\n\n        // List styling\n        chatList.setFixedCellHeight(60);\n        chatList.setBorder(null);\n    }\n\n    private void addListeners() {\n        // Search functionality\n        searchField.getDocument().addDocumentListener(new DocumentListener() {\n            public void insertUpdate(DocumentEvent e) { filterChats(); }\n            public void removeUpdate(DocumentEvent e) { filterChats(); }\n            public void changedUpdate(DocumentEvent e) { filterChats(); }\n        });\n\n        searchField.addFocusListener(new FocusListener() {\n            @Override\n            public void focusGained(FocusEvent e) {\n                filterChats();\n                searching = true;\n            }\n\n            @Override\n            public void focusLost(FocusEvent e) {\n                searching = false;\n            }\n        });\n\n        // Chat selection listener\n        chatList.addListSelectionListener(e -> {\n            if (!e.getValueIsAdjusting()) {\n                String selectedChat = chatList.getSelectedValue();\n                if (selectedChat != null) {\n                    firePropertyChange(\"selectedChat\", null, selectedChat);\n                }\n            }\n         });\n    }\n\n    // Custom cell renderer for chat list items\n    private class ChatListCellRenderer extends JPanel implements ListCellRenderer<String> {\n        private JLabel nameLabel = new JLabel();\n        private JLabel lastMessageLabel = new JLabel();\n        private JLabel timeLabel = new JLabel();\n\n        public ChatListCellRenderer() {\n            setLayout(new BorderLayout(10, 5));\n            setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));\n\n            JPanel textPanel = new JPanel(new GridLayout(2, 1, 0, 2));\n            textPanel.setOpaque(false);\n            textPanel.add(nameLabel);\n            textPanel.add(lastMessageLabel);\n\n            add(textPanel, BorderLayout.CENTER);\n            add(timeLabel, BorderLayout.EAST);\n\n            // Style labels\n            nameLabel.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            lastMessageLabel.setFont(new Font(\"Arial\", Font.PLAIN, 12));\n            lastMessageLabel.setForeground(Color.GRAY);\n            timeLabel.setFont(new Font(\"Arial\", Font.PLAIN, 11));\n            timeLabel.setForeground(Color.GRAY);\n        }\n\n        @Override\n        public Component getListCellRendererComponent(\n                JList<? extends String> list, String username,\n                int index, boolean isSelected, boolean cellHasFocus) {\n            // Set content\n            if (username == null || username.isEmpty()) {\n                listModel.clear();\n                return this;\n            }\n            nameLabel.setText(username);\n            lastMessageLabel.setText(getLastMessage(username));\n            timeLabel.setText(getLastMessageTime(username));\n\n            // Handle selection styling\n            if (isSelected) {\n                setBackground(new Color(240, 247, 250));\n                setBorder(BorderFactory.createCompoundBorder(\n                    BorderFactory.createMatteBorder(0, 3, 0, 0, new Color(76, 175, 80)),\n                    BorderFactory.createEmptyBorder(5, 7, 5, 10)\n                ));\n            } else {\n                setBackground(Color.WHITE);\n                setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));\n            }\n\n            return this;\n        }\n\n        private String getLastMessage(String username) {\n            // Get last message from chat history\n            String chat = \"\";\n            try {\n                chat = client.getChat(username);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (chat == null || chat.isEmpty()) {\n                return \"\";\n            }\n            // Parse and return last message preview\n            // Get to the beginning of the last message\n            chat = chat.substring(0, chat.lastIndexOf((char) 29));\n            if (chat.contains(\"\" + (char) 29)) {\n                chat = chat.substring(0, chat.lastIndexOf((char) 29));\n            }\n            String temp = chat.substring(chat.indexOf(\":\") + 1);\n            return temp.substring(temp.indexOf(\":\") + 1);\n        }\n\n        private String getLastMessageTime(String username) {\n            // Get and format last message timestamp\n            String chat = \"NULL\";\n            try {\n                chat = (client.getChat(username));\n            } catch (Exception e) {\n                e.printStackTrace();\n                return \"FATAL ERROR\";\n            }\n            if (chat == null || chat.isEmpty()) {\n                return \"\";\n            }\n            // Get to the beginning of the last message\n            chat = chat.substring(0, chat.lastIndexOf((char) 29));\n            if (chat.contains(\"\" + (char) 29)) {\n                chat = chat.substring(0, chat.lastIndexOf((char) 29));\n            }\n            String temp = chat.substring(chat.indexOf(\":\") + 1);\n            String lastMessageContent = temp.substring(temp.indexOf(\":\") + 2);\n            String[] arguments = chat.split(\":\");\n            Message msg = new Message(arguments[1], lastMessageContent, Long.parseLong(arguments[0]));\n            Date currTime = Date.from(Instant.now());\n            Date msgTime = msg.getTimeStamp();\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyyDDD\");\n            SimpleDateFormat timeFormat = new SimpleDateFormat(\"h:mm a\");\n            if (dateFormat.format(currTime).equals(dateFormat.format(msgTime))) {\n                return timeFormat.format(msgTime);\n            }\n            int currYearDay = Integer.parseInt(dateFormat.format(currTime));\n            int msgYearDay = Integer.parseInt(dateFormat.format(msgTime));\n            if (msgYearDay == currYearDay - 1)\n            {\n                return \"Yesterday\";\n            }\n            Calendar calendar = Calendar.getInstance();\n            calendar.set(Calendar.DAY_OF_YEAR, msgYearDay);\n            SimpleDateFormat dayOfWeekFormat = new SimpleDateFormat(\"EEEE\");\n            if (((currYearDay - 7) < msgYearDay) && (msgYearDay < (currYearDay - 1)))\n            {\n                return dayOfWeekFormat.format(calendar.getTime());\n            }\n            SimpleDateFormat dateFormat1 = new SimpleDateFormat(\"d MMM yyyy\");\n            calendar.set(Calendar.DAY_OF_YEAR, msgYearDay);\n            return dateFormat1.format(calendar.getTime());\n        }\n    }\n\n    private void filterChats() {\n        String searchText = searchField.getText().toLowerCase();\n        listModel.clear();\n        try {\n            for (String chat : client.getUserList().split(\"\" + (char) 29)) {\n                if (chat.toLowerCase().contains(searchText)) {\n                    listModel.addElement(chat);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void showNewChatDialog() {\n        String[] users = {};\n        try {\n            users = client.getUserList().split(\"\" + (char) 29);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        JFrame newChatDialog = new JFrame(\"Select User\");\n        newChatDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n        newChatDialog.setSize(550, 100);\n        newChatDialog.setLocationRelativeTo(this.getParent());\n\n        JComboBox<String> userComboBox = new JComboBox<>(users);\n\n        JPanel buttonPanel = new JPanel(new FlowLayout(0, 0, 0));\n\n        RoundedButton addFriendButton = new RoundedButton(\"Add/Remove Friend\",15);\n        RoundedButton blockButton = new RoundedButton(\"Block/Unblock\",15);\n        RoundedButton openChatButton = new RoundedButton(\"Open Chat\",15);\n        RoundedButton cancelButton = new RoundedButton(\"Cancel\",15);\n\n\n        addFriendButton.addActionListener(e -> {\n            String selectedUser = (String) userComboBox.getSelectedItem();\n            try {\n                if (selectedUser != null) {\n                    if (client.getFriendList().contains(selectedUser)) {\n                        client.removeFriend(selectedUser);\n                    } else {\n                        client.addFriend(selectedUser);\n                    }\n                }\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n            newChatDialog.dispose();\n        });\n\n        blockButton.addActionListener(e -> {\n            String selectedUser = (String) userComboBox.getSelectedItem();\n            try {\n                if (selectedUser != null) {\n                    if (client.getBlockList().contains(selectedUser)) {\n                        client.unblockUser(selectedUser);\n                    } else {\n                        client.blockUser(selectedUser);\n                    }\n                }\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n            newChatDialog.dispose();\n        });\n\n        openChatButton.addActionListener(e -> {\n            String selectedUser = (String) userComboBox.getSelectedItem();\n            try {\n                if (client.getChat(selectedUser).isEmpty()) {\n                    addChat(selectedUser);\n                    client.createChat(selectedUser);\n                }\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n            chatList.setSelectedValue(selectedUser, true);\n            newChatDialog.dispose();\n        });\n\n        cancelButton.addActionListener(e -> newChatDialog.dispose());\n\n        buttonPanel.add(addFriendButton);\n        buttonPanel.add(blockButton);\n        buttonPanel.add(openChatButton);\n        buttonPanel.add(cancelButton);\n\n        newChatDialog.add(buttonPanel, BorderLayout.SOUTH);\n        newChatDialog.add(userComboBox, BorderLayout.CENTER);\n\n        newChatDialog.setVisible(true);\n\n        /*\n        String selectedUser = (String) JOptionPane.showInputDialog(\n            this,\n            \"Select a user to chat with:\",\n            \"New Chat\",\n            JOptionPane.PLAIN_MESSAGE,\n            null,\n            users,\n            users[0]\n        );\n\n        if (selectedUser != null) {\n            if (client.getChat(selectedUser).isEmpty()) {\n                addChat(selectedUser);\n                client.createChat(selectedUser);\n            }\n            chatList.setSelectedValue(selectedUser, true);\n        }*/\n    }\n\n    private void addUnreadIndicator(String username, int count) {\n        // Add a small circle with number of unread messages\n        RoundedLabel unreadLabel = new RoundedLabel(String.valueOf(count),15);\n        unreadLabel.setOpaque(true);\n        unreadLabel.setBackground(new Color(76, 175, 80));\n        unreadLabel.setForeground(Color.WHITE);\n        unreadLabel.setBorder(new RoundedBorder(10));\n    }\n    \n    // Custom rounded border for buttons\n    private class RoundedBorder extends AbstractBorder {\n        private int radius;\n        \n        RoundedBorder(int radius) {\n            this.radius = radius;\n        }\n        \n        @Override\n        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawRoundRect(x, y, width - 1, height - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n    \n    // Public methods\n    public void refreshChats(String[] chats) {\n        if (searchField.getText().trim().isEmpty() && !searching && chatList.isSelectionEmpty()) {\n            listModel.clear();\n            if (chats != null) {\n                for (String chat : chats) {\n                    if (chat != null) {\n                        listModel.addElement(chat);\n                    }\n                }\n            }\n        }\n    }\n    \n    public void addChat(String chat) {\n        if (!listModel.contains(chat)) {\n            listModel.addElement(chat);\n        }\n    }\n    \n    public void removeChat(String chat) {\n        listModel.removeElement(chat);\n    }\n    \n    public String getSelectedChat() {\n        return chatList.getSelectedValue();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ChatListPanel.java b/src/main/java/ChatListPanel.java
--- a/src/main/java/ChatListPanel.java	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/src/main/java/ChatListPanel.java	(date 1733504751507)
@@ -319,15 +319,37 @@
     private void addListeners() {
         // Search functionality
         searchField.getDocument().addDocumentListener(new DocumentListener() {
-            public void insertUpdate(DocumentEvent e) { filterChats(); }
-            public void removeUpdate(DocumentEvent e) { filterChats(); }
-            public void changedUpdate(DocumentEvent e) { filterChats(); }
+            public void insertUpdate(DocumentEvent e) {
+                try {
+                filterChats();
+            } catch (IOException ex) {
+                return;
+            }
+            }
+            public void removeUpdate(DocumentEvent e) {
+                try {
+                    filterChats();
+                } catch (IOException ex) {
+                    return;
+                }
+            }
+            public void changedUpdate(DocumentEvent e) {
+                try {
+                    filterChats();
+                } catch (IOException ex) {
+                    return;
+                }
+            }
         });
 
         searchField.addFocusListener(new FocusListener() {
             @Override
             public void focusGained(FocusEvent e) {
-                filterChats();
+                try {
+                    filterChats();
+                } catch (IOException ex) {
+                    return;
+                }
                 searching = true;
             }
 
@@ -384,8 +406,12 @@
                 return this;
             }
             nameLabel.setText(username);
-            lastMessageLabel.setText(getLastMessage(username));
-            timeLabel.setText(getLastMessageTime(username));
+            try {
+                lastMessageLabel.setText(getLastMessage(username));
+                timeLabel.setText(getLastMessageTime(username));
+            } catch (IOException ex) {
+                return this;
+            }
 
             // Handle selection styling
             if (isSelected) {
@@ -402,14 +428,10 @@
             return this;
         }
 
-        private String getLastMessage(String username) {
+        private String getLastMessage(String username) throws IOException {
             // Get last message from chat history
             String chat = "";
-            try {
-                chat = client.getChat(username);
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
+            chat = client.getChat(username);
             if (chat == null || chat.isEmpty()) {
                 return "";
             }
@@ -423,15 +445,10 @@
             return temp.substring(temp.indexOf(":") + 1);
         }
 
-        private String getLastMessageTime(String username) {
+        private String getLastMessageTime(String username) throws IOException {
             // Get and format last message timestamp
             String chat = "NULL";
-            try {
-                chat = (client.getChat(username));
-            } catch (Exception e) {
-                e.printStackTrace();
-                return "FATAL ERROR";
-            }
+            chat = (client.getChat(username));
             if (chat == null || chat.isEmpty()) {
                 return "";
             }
@@ -470,27 +487,20 @@
         }
     }
 
-    private void filterChats() {
+    private void filterChats() throws IOException {
         String searchText = searchField.getText().toLowerCase();
         listModel.clear();
-        try {
-            for (String chat : client.getUserList().split("" + (char) 29)) {
-                if (chat.toLowerCase().contains(searchText)) {
-                    listModel.addElement(chat);
-                }
+        for (String chat : client.getUserList().split("" + (char) 29)) {
+            if (chat.toLowerCase().contains(searchText)) {
+                listModel.addElement(chat);
             }
-        } catch (IOException e) {
-            e.printStackTrace();
         }
     }
 
-    private void showNewChatDialog() {
+    @Deprecated
+    private void showNewChatDialog() throws IOException {
         String[] users = {};
-        try {
-            users = client.getUserList().split("" + (char) 29);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
+        users = client.getUserList().split("" + (char) 29);
         JFrame newChatDialog = new JFrame("Select User");
         newChatDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
         newChatDialog.setSize(550, 100);
@@ -517,7 +527,7 @@
                     }
                 }
             } catch (IOException ex) {
-                ex.printStackTrace();
+                return;
             }
             newChatDialog.dispose();
         });
@@ -533,7 +543,7 @@
                     }
                 }
             } catch (IOException ex) {
-                ex.printStackTrace();
+                return;
             }
             newChatDialog.dispose();
         });
@@ -546,7 +556,7 @@
                     client.createChat(selectedUser);
                 }
             } catch (IOException ex) {
-                ex.printStackTrace();
+                return;
             }
             chatList.setSelectedValue(selectedUser, true);
             newChatDialog.dispose();
@@ -611,12 +621,12 @@
     }
     
     // Public methods
-    public void refreshChats(String[] chats) {
+    public void refreshChats(String[] chats) throws IOException {
         if (searchField.getText().trim().isEmpty() && !searching && chatList.isSelectionEmpty()) {
             listModel.clear();
             if (chats != null) {
                 for (String chat : chats) {
-                    if (chat != null) {
+                    if (chat != null && !chat.equals(client.getUsername())) {
                         listModel.addElement(chat);
                     }
                 }
Index: src/main/java/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.Date;\n\n/**\n * @author William Thain, Fox Christiansen, Jackson Shields, Peter Bui: lab sec\n *         12\n * @version Nov 2, 2024\n */\npublic class Server implements Runnable, ServerInterface {\n    private static ServerSocket serverSocket;\n    private static Database db;\n    private static int clientCount = 0;\n    protected Socket clientSocket;\n    protected User currentUser;\n    private final char groupSeparatorChar = (char) 29;\n\n    public Server(Socket socket) {\n        clientSocket = socket;// maybe not needed the three lines\n    }\n\n    public Server() {\n    }\n\n    public void run() {\n        BufferedReader reader = null;\n        PrintWriter writer = null;\n\n        try {\n            reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n            writer = new PrintWriter(clientSocket.getOutputStream(), true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        boolean running = true;\n        String line = \"\";\n        while (running) {\n            try {\n                line = reader.readLine();\n            } catch (SocketException e) {\n                running = false;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (line != null && !line.isEmpty()) {\n                String command = line.substring(0, line.indexOf(':'));\n                String content = line.substring(line.indexOf(':') + 1);\n                String result = \"\";\n                switch (command) {\n                    case \"login\":\n                        result = login(content);\n                        break;\n                    case \"isLoggedIn\":\n                        result = isLoggedIn();\n                        break;\n                    case \"register\":\n                        result = register(content);\n                        break;\n                    case \"getUserList\":\n                        result = getUserList();\n                        break;\n                    case \"getChat\":\n                        result = getChat(content);\n                        break;\n                    case \"getChatList\":\n                        result = getChatList();\n                        break;\n                    case \"createChat\":\n                        result = createChat(content);\n                        break;\n                    case \"sendMessage\":\n                        result = sendMessage(content);\n                        break;\n                    case \"deleteMessage\":\n                        result = deleteMessage(content);\n                        break;\n                    case \"accessProfile\":\n                        result = accessProfile();\n                        break;\n                    case \"accessUserProfile\":\n                        result = accessUserProfile(content);\n                        break;\n                    case \"accessPhotosFromUser\":\n                        result = accessPhotosFromUser();\n                        break;\n                    case \"saveProfile\":\n                        result = saveProfile(content);\n                        break;\n                    case \"removeFriend\":\n                        result = removeFriend(content);\n                        break;\n                    case \"addFriend\":\n                        result = addFriend(content);\n                        break;\n                    case \"unblockUser\":\n                        result = unblockUser(content);\n                        break;\n                    case \"blockUser\":\n                        result = blockUser(content);\n                        break;\n                    case \"deleteChat\":\n                        result = deleteChat(content);\n                        break;\n                    case \"sendImage\":\n                        result = sendImage(content);\n                        break;\n                    case \"getBlockList\":\n                        result = getBlockList();\n                        break;\n                    case \"getFriendList\":\n                        result = getFriendList();\n                        break;\n                    case \"isFriendsOnly\":\n                        result = isFriendsOnly();\n                        break;\n                    case \"setFriendsOnly\":\n                        result = setFriendsOnly(Boolean.parseBoolean(content));\n                        break;\n                    case \"setProfilePic\":\n                        result = setProfilePic(content);\n                        break;\n                    case \"getProfilePic\":\n                        result = getProfilePic();\n                        break;\n                    case \"logout\":\n                        result = logout();\n                        break;\n                    case \"disconnect\":\n                        if (disconnect()) {\n                            running = false;\n                            clientCount--;\n                        } else {\n                            result = \"false\";\n                        }\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid command: \" + command);\n                }\n                if (result != null) {\n                    send(result, writer);\n                }\n            }\n        }\n    }\n    @Override\n    public String deleteMessage(String content) {\n        String[] info = content.split(groupSeparatorChar + \"\");\n        if (info.length != 2 || !info[0].contains(\":\")) {\n            return \"false\";\n        }\n        String sender = info[0].substring(0, info[0].indexOf(\":\"));\n        String messageContent = info[0].substring(info[0].indexOf(\":\") + 2);\n        Message message = new Message(messageContent, sender);\n        String otherUser = info[1];\n        if (db.deleteMessage(message, otherUser)) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n    @Override\n    public String saveProfile(String content) {\n        /*\n         * Format input as:\n         * usernameGSfirstnameGSlastnameGSbioGSbirthdayasMM/DD/\n         * YYYYGSprofilepicGSfriendsonly\n         */\n        try {\n            String[] fields = content.split((char) 29 + \"\");\n            if (currentUser == null) {\n                return \"false\";\n            }\n\n            // Store original birthday to check if validation passed\n            int[] originalBirthday = currentUser.getBirthday();\n\n            currentUser.setFirstName(fields[1]);\n            currentUser.setLastName(fields[2]);\n            currentUser.setBio(fields[3]);\n\n            // Birthday validation\n            String[] birthdayStr = fields[4].split(\"/\");\n            if (birthdayStr.length != 3) {\n                return \"false\";\n            }\n\n            int[] birthday = new int[3];\n            try {\n                for (int i = 0; i < 3; i++) {\n                    birthday[i] = Integer.parseInt(birthdayStr[i]);\n                }\n\n                // Use User's setBirthday method for validation\n                currentUser.setBirthday(birthday);\n\n                // If birthday didn't change, validation failed\n                if (currentUser.getBirthday() == null ||\n                        (originalBirthday != null && currentUser.getBirthday() == originalBirthday)) {\n                    return \"false\";\n                }\n            } catch (NumberFormatException e) {\n                return \"false\";\n            }\n\n            currentUser.setProfilePic(fields[5]);\n            currentUser.setFriendsOnly(Boolean.parseBoolean(fields[6].trim()));\n            db.setUser(currentUser);\n            return \"true\";\n        } catch (Exception e) {\n            return \"false\";\n        }\n    }\n    @Override\n    public String accessProfile() {\n        return currentUser.toString();\n    }\n\n    public String accessUserProfile(String user) {\n        return db.getUser(user).toString();\n    }\n\n    public String accessPhotosFromUser() {\n        return db.getAllPhotosFromUser(currentUser).toString();\n    }\n    \n    @Override\n    public String deleteChat(String user) {\n        try {\n            // Check if user is logged in\n            if (currentUser == null) {\n                return \"false\";\n            }\n\n            if (db.deleteChat(currentUser.getUsername(), user)) {\n                return \"true\";\n            }\n            return \"false\";\n        } catch (Exception e) {\n            return \"false\";\n        }\n    }\n    @Override\n    public boolean disconnect() {\n        try {\n            clientSocket.close();\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    @Override\n    public String getProfilePic() {\n        return db.getUser(currentUser.getUsername()).getProfilePic();\n    }\n    @Override\n    public String login(String content) {\n        if (content == null || content.isEmpty()) {\n            return \"false\";\n        }\n        String[] credentials = splitContent(content);\n        String username = credentials[0];\n        String password = credentials[1];\n        for (User u : db.getUsers()) {\n            if (u.getUsername().equals(username) && u.getPassword().equals(password)) {\n                currentUser = u;\n                return \"true\";\n            }\n        }\n        return \"false\";\n    }\n\n    public String isLoggedIn() {\n        if (currentUser == null) {\n            return \"false\";\n        }\n        return \"true\";\n    }\n    @Override\n    public String register(String content) {\n        try {\n            String[] credentials = splitContent(content);\n            if (credentials.length < 2) {\n                return \"false\";\n            }\n            String username = credentials[0];\n            String password = credentials[1];\n            if (db.addUser(new User(username, password))) {\n                currentUser = new User(username, password);\n                return \"true\";\n            }\n            return \"false\";\n        } catch (Exception e) {\n            return \"false\";\n        }\n    }\n\n    /**\n     * Returns a String of usernames of all users.\n     * username:username:etc\n     *\n     * @return String of users.\n     */\n    @Override\n    public String getUserList() {\n        ArrayList<User> users = db.getUsers();\n        String userList = \"\";\n        for (int i = 0; i < users.size(); i++) {\n            userList += users.get(i).getUsername() + groupSeparatorChar;\n        }\n        return userList;\n    }\n\n    /**\n     * Returns a String of messages using the toString() of each message in format\n     * username: message[endChar]username: message[endChar] etc.\n     * [endChar] = (char) 29\n     *\n     * @param content The username of the other user\n     * @return String of all messages\n     */\n    @Override\n    public String getChat(String content) {\n        MessageHistory mh = db.getMessages(currentUser.getUsername(), content);\n        if (mh == null) {\n            return \"\";\n        }\n        ArrayList<Message> messages = mh.getMessageHistory();\n        String chat = \"\";\n        char endChar = (char) 29;\n        for (int i = 0; i < messages.size(); i++) {\n            chat = chat.concat((messages.get(i)).toString());\n            chat = chat.concat(\"\" + endChar);\n        }\n        return chat;\n    }\n\n    public String getChatList() {\n        String[] chats = db.getAllUserChats(currentUser.getUsername());\n        String chatList = \"\";\n        for (int i = 0; i < chats.length; i++) {\n            chatList += chats[i] + groupSeparatorChar;\n        }\n        return chatList;\n    }\n\n    public String createChat(String content) {\n        try {\n            String[] parts = splitContent(content);\n            String userTwo = parts[0];\n            String[] users = {currentUser.getUsername(), userTwo};\n            MessageHistory mh = new MessageHistory(users);\n            return String.valueOf(db.addMessageHistory(mh));\n        } catch (Exception e) {\n            return \"false\";\n        }\n    }\n\n    @Override\n    public String sendMessage(String content) {\n        try {\n            String[] parts = splitContent(content);\n            // Check if we have both recipient and message\n            if (parts.length < 2) {\n                return \"false\";\n            }\n\n            String userTwo = parts[0];\n            String message = parts[1];\n\n            // Check for self-messaging\n            if (currentUser != null && userTwo.equals(currentUser.getUsername())) {\n                return \"false\";\n            }\n\n            // Check for null/empty message\n            if (message == null || message.isEmpty() || message.contains(\"\\0\")) {\n                return \"false\";\n            }\n\n            Message mes = new Message(message, currentUser.getUsername(), Date.from(Instant.now()).getTime());\n            return String.valueOf(db.addMessage(mes, userTwo));\n        } catch (Exception e) {\n            return \"false\";\n        }\n    }\n    @Override\n    public String sendImage(String content) {\n        try {\n            String[] parts = splitContent(content);\n            if (parts.length < 2) {\n                return \"false\";\n            }\n            String userTwo = parts[0];\n            String path = parts[1];\n            // Check for self-messaging\n            if (currentUser != null && userTwo.equals(currentUser.getUsername())) {\n                return \"false\";\n            }\n\n            // Check for null/empty message\n            if (path == null || path.isEmpty()) {\n                return \"false\";\n            }\n            Photo photo = new Photo(path, currentUser.getUsername());\n            return String.valueOf(db.addPhoto(photo,userTwo));\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"false\";\n        }\n    }\n    @Override\n    public String addFriend(String otherUsername) {\n        if (db.addFriend(currentUser.getUsername(), otherUsername)) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    /**\n     * Returns a String of usernames of all friends for the current user\n     * username:username:etc\n     *\n     * @return String of friends\n     */\n    @Override\n    public String getFriendList() {\n        String[] friends = db.getFriends(currentUser.getUsername());\n        String friendList = \"\";\n        for (int i = 0; i < friends.length; i++) {\n            friendList += friends[i] + groupSeparatorChar;\n        }\n        return friendList;\n    }\n    @Override\n    public String blockUser(String otherUsername) {\n        if (db.blockUser(currentUser.getUsername(), otherUsername)) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    /**\n     * Returns a String of usernames of all users blocked by the current user\n     * username:username:etc.\n     *\n     * @return\n     */\n    @Override\n    public String getBlockList() {\n        String[] blocks = db.getBlockList(currentUser.getUsername());\n        String blockList = \"\";\n        for (int i = 0; i < blocks.length; i++) {\n            blockList += blocks[i] + (char) 29;\n        }\n        return blockList;\n    }\n    @Override\n    public String removeFriend(String otherUsername) {\n        if (db.removeFriend(currentUser.getUsername(), otherUsername)) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n    @Override\n    public String unblockUser(String otherUsername) {\n        if (db.unblockUser(currentUser.getUsername(), otherUsername)) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n    @Override\n    public String isFriendsOnly() {\n        if (currentUser.isFriendsOnly()) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n    @Override\n    public String setFriendsOnly(boolean friendsOnly) {\n        currentUser.setFriendsOnly(friendsOnly);\n        return \"true\";\n    }\n    @Override\n    public String setProfilePic(String profilePic) {\n        db.getUser(currentUser.getUsername()).setProfilePic(profilePic);\n        return \"true\";\n    }\n    @Override\n    public String logout() {\n        currentUser = null;\n        return \"true\";\n    }\n\n    public void send(String result, PrintWriter writer) {\n        writer.println(result);\n        writer.flush();\n    }\n\n    public static void setDatabase(Database database) {\n        db = database;\n    }\n\n    public static Database getDatabase() {\n        return db;\n    }\n\n    public void setCurrentUser(User user) {\n        this.currentUser = user;\n    }\n\n    public User getCurrentUser() {\n        return this.currentUser;\n    }\n\n    public void setClientSocket(Socket socket) {\n        this.clientSocket = socket;\n    }\n\n    public Socket getClientSocket() {\n        return this.clientSocket;\n    }\n\n    // Helper method to split content with group separator\n    private String[] splitContent(String content) {\n        if (content == null || content.isEmpty()) {\n            return new String[0];\n        }\n        try {\n            return content.split(String.valueOf(groupSeparatorChar));\n        } catch (Exception e) {\n            return new String[0];\n        }\n    }\n\n    public static void main(String[] args) {\n        db = new Database();\n        db.loadMessages();\n        db.loadUsers();\n        if (!(args.length > 0)) {\n            Runtime.getRuntime().addShutdownHook(new Thread(new DataSaver(db)));\n        }\n\n        try {\n            serverSocket = new ServerSocket(4242);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            while (true) {\n                Socket socket = serverSocket.accept();\n                clientCount++;\n                new Thread(new Server(socket)).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Server.java b/src/main/java/Server.java
--- a/src/main/java/Server.java	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/src/main/java/Server.java	(date 1733503715245)
@@ -82,6 +82,9 @@
                     case "deleteMessage":
                         result = deleteMessage(content);
                         break;
+                    case "getUsername":
+                        result = getUsername();
+                        break;
                     case "accessProfile":
                         result = accessProfile();
                         break;
@@ -217,6 +220,11 @@
             return "false";
         }
     }
+
+    public String getUsername() {
+        return currentUser.getUsername();
+    }
+
     @Override
     public String accessProfile() {
         return currentUser.toString();
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b0abc399-0f3b-4251-bbf6-d07aad17a43b\" name=\"Changes\" comment=\"Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users.\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 7\n}</component>\n  <component name=\"ProjectId\" id=\"2pisuY6CwKQYFh6yVVhvZa2Seg3\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.GUI.executor\": \"Run\",\n    \"Application.ServerGUI.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <module name=\"CS180Team-Project1\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"Python.FlaskServer\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"Tox\" factoryName=\"Tox\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b0abc399-0f3b-4251-bbf6-d07aad17a43b\" name=\"Changes\" comment=\"\" />\n      <created>1733260455985</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1733260455985</updated>\n      <workItem from=\"1733260458364\" duration=\"1000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Changed the friend/block buttons to change to unfriend/unblock if they are already blocked and friended and vice versa!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733457444718</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733457444718</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Temporary unworking code for displaying the friends and blocks list.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733463352763</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733463352763</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733465739197</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733465739197</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"4\" />\n    <servers />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"commit for git tracking.\" />\n    <MESSAGE value=\"Changed the friend/block buttons to change to unfriend/unblock if they are already blocked and friended and vice versa!\" />\n    <MESSAGE value=\"Temporary unworking code for displaying the friends and blocks list.\" />\n    <MESSAGE value=\"Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users.\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/Server.java</url>\n          <line>88</line>\n          <option name=\"timeStamp\" value=\"31\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n    <pin-to-top-manager>\n      <pinned-members>\n        <PinnedItemInfo parentTag=\"java.lang.String\" memberName=\"value\" />\n      </pinned-members>\n    </pin-to-top-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 274345f3d3bc8a40380e47fbccf645895aeebb32)
+++ b/.idea/workspace.xml	(date 1733504751638)
@@ -4,7 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b0abc399-0f3b-4251-bbf6-d07aad17a43b" name="Changes" comment="Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users." />
+    <list default="true" id="b0abc399-0f3b-4251-bbf6-d07aad17a43b" name="Changes" comment="Removed the NewChat button from chatlistpanel.">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ChatListPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ChatListPanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Client.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Client.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/GUI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/GUI.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ProfilePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ProfilePanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Server.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/chatPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/chatPanel.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -140,7 +148,15 @@
       <option name="project" value="LOCAL" />
       <updated>1733465739197</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="Removed the NewChat button from chatlistpanel.">
+      <option name="closed" value="true" />
+      <created>1733493641394</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1733493641394</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -148,14 +164,15 @@
     <MESSAGE value="Changed the friend/block buttons to change to unfriend/unblock if they are already blocked and friended and vice versa!" />
     <MESSAGE value="Temporary unworking code for displaying the friends and blocks list." />
     <MESSAGE value="Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users." />
-    <option name="LAST_COMMIT_MESSAGE" value="Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users." />
+    <MESSAGE value="Removed the NewChat button from chatlistpanel." />
+    <option name="LAST_COMMIT_MESSAGE" value="Removed the NewChat button from chatlistpanel." />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
       <breakpoints>
         <line-breakpoint enabled="true" type="java-line">
           <url>file://$PROJECT_DIR$/src/main/java/Server.java</url>
-          <line>88</line>
+          <line>91</line>
           <option name="timeStamp" value="31" />
         </line-breakpoint>
       </breakpoints>
