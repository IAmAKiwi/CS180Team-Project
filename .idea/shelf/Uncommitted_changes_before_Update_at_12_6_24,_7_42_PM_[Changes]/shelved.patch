Index: src/main/java/GUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport javax.swing.border.EmptyBorder;\n\nimport java.awt.*;\nimport java.beans.PropertyChangeListener;\nimport java.io.IOException;\nimport javax.swing.border.*;\nimport java.awt.event.*;\nimport javax.swing.border.EmptyBorder;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class GUI implements Runnable {\n    private JFrame frame;\n    private ChatListPanel chatListPanel;\n    private LoginPanel loginPanel;\n    private chatPanel chatPanel;\n    private ProfilePanel profilePanel;\n    private RoundedButton logoutButton;\n    // private RoundedButton addFriendButton;\n    // private RoundedButton addBlockButton;\n    private Client client;\n    private RoundedPanel headerPanel;\n    private JPopupMenu profileMenu;\n    private CircularButton profileButton;\n    int count = 0;\n    private ProfilePanel selectedProfilePanel;\n\n    public GUI(LoginPanel loginPanel) {\n        this.loginPanel = loginPanel;\n    }\n\n    private static class RoundedButton extends JButton {\n        private Color backgroundColor;\n        private Color hoverBackgroundColor;\n        private Color pressedBackgroundColor;\n        private int radius;\n        private boolean isHovered = false;\n        private boolean isPressed = false;\n\n        public RoundedButton(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setContentAreaFilled(false);\n            setFocusPainted(false);\n            setBorderPainted(false);\n            setOpaque(false);\n\n            // Add hover effect\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseEntered(MouseEvent e) {\n                    isHovered = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseExited(MouseEvent e) {\n                    isHovered = false;\n                    repaint();\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    isPressed = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseReleased(MouseEvent e) {\n                    isPressed = false;\n                    repaint();\n                }\n            });\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            // Get current background color\n            Color background = getBackground();\n            if (isPressed) {\n                background = background.darker();\n            } else if (isHovered) {\n                background = background.brighter();\n            }\n\n            g2.setColor(background);\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            super.paintComponent(g);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedPanel extends JPanel {\n        private int radius;\n\n        public RoundedPanel(int radius) {\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            super.paintComponent(g);\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n            g2.dispose();\n        }\n    }\n    private void updateProfileButton() {\n        String profilePic = profilePanel.getProfilePic();\n        if (profilePic == null || profilePic.isEmpty() || profilePic.equals(\"\") \n                || profilePic.equals(\"profile.png\")) {\n            profilePic = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n        }\n        \n        // Remove old button wrapper\n        Component[] components = headerPanel.getComponents();\n        for (Component comp : components) {\n            if (comp instanceof JPanel && comp.getName() != null \n                    && comp.getName().equals(\"buttonWrapper\")) {\n                headerPanel.remove(comp);\n            }\n        }\n    \n        // Create new button\n        profileButton = new CircularButton(profilePic, 50);\n        profileButton.setBorder(new EmptyBorder(0, 0, 0, 10));\n        \n        // Create new wrapper\n        JPanel buttonWrapper = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        buttonWrapper.setName(\"buttonWrapper\"); // For identification\n        buttonWrapper.setBackground(new Color(245, 245, 245));\n        buttonWrapper.setBorder(new EmptyBorder(0, 0, 30, 200));\n        buttonWrapper.add(profileButton);\n        \n        // Add new wrapper\n        headerPanel.add(buttonWrapper, BorderLayout.EAST);\n        headerPanel.revalidate();\n        headerPanel.repaint();\n    }\n    private void createHeader() {\n        headerPanel = new RoundedPanel(15);\n        headerPanel.setLayout(new BorderLayout());\n        headerPanel.setBackground(new Color(245, 245, 245));\n        headerPanel.setPreferredSize(new Dimension(frame.getWidth(), 60));\n        // headerPanel.setBorder(new EmptyBorder(10,10,10,10));\n\n        String profilePic = profilePanel.getProfilePic();\n        if (profilePic == null || profilePic.isEmpty() || profilePic.equals(\"\") || profilePic.equals(\"profile.png\")) {\n            profilePic = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n        }\n        profileButton = new CircularButton(profilePic, 50);\n\n        profileButton.setBorder(new EmptyBorder(0, 0, 0, 10));\n        JPanel buttonWrapper = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        buttonWrapper.setBackground(new Color(245, 245, 245));\n        buttonWrapper.setBorder(new EmptyBorder(0, 0, 30, 200)); // top, left, bottom, right padding\n        buttonWrapper.add(profileButton);\n        headerPanel.add(buttonWrapper, BorderLayout.EAST);\n\n        profileMenu = new JPopupMenu();\n        profileMenu.setBackground(new Color(30, 30, 30));\n\n        JMenuItem profileItem = new JMenuItem(\"My Profile\");\n        profileItem.setForeground(Color.WHITE);\n        profileItem.setBackground(new Color(30, 30, 30));\n        profileItem.addActionListener(e -> {\n            try {\n                ArrayList<String> friendList = new ArrayList<>();\n                ArrayList<String> blockList = new ArrayList<>();\n                String friends = client.getFriendList();\n                String blocks = client.getBlockList();\n                if (!friends.isEmpty()) {\n                    friendList = (ArrayList<String>) Arrays.asList(friends.split(\n                            \"\" + (char) 29));\n                }\n                if (!blocks.isEmpty()) {\n                    blockList =  (ArrayList<String>) Arrays.asList(blocks.split(\n                            \"\" + (char) 29));\n                }\n                profilePanel.createComponent(null, friendList, blockList);\n            } catch (IOException ex) {\n                disconnect();\n            }\n\n\n\n        });\n\n        JMenuItem editProfileItem = new JMenuItem(\"Edit Profile\");\n        editProfileItem.setForeground(Color.WHITE);\n        editProfileItem.setBackground(new Color(30, 30, 30));\n        editProfileItem.addActionListener(e -> {\n            profilePanel.setVisible(true);\n            profilePanel.createComponent(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    // This will run after save button is clicked\n                    SwingUtilities.invokeLater(() -> {\n                        updateProfileButton();\n                        updateProfilePanel();\n                    });\n                }\n            }, null, null);\n            updateProfileButton(); \n        });\n\n        profileMenu.add(profileItem);\n        profileMenu.add(editProfileItem);\n\n        profileButton.addActionListener(e -> {\n            profileMenu.show(profileButton, 0, profileButton.getHeight());\n        });\n\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.gridwidth = GridBagConstraints.REMAINDER;\n        gbc.fill = GridBagConstraints.HORIZONTAL;\n        gbc.weightx = 1.0;\n        gbc.weighty = 0.0;\n        gbc.gridy = 0;\n        frame.add(headerPanel, gbc);\n    }\n\n    class CircularButton extends JButton {\n        private Image image;\n        private int size;\n\n        public CircularButton(String imagePath, int size) {\n            this.size = size;\n            setPreferredSize(new Dimension(size, size));\n            setContentAreaFilled(false);\n            setBorderPainted(false);\n            setFocusPainted(false);\n\n            try {\n                // Load and scale image\n                ImageIcon icon = new ImageIcon(imagePath);\n                Image originalImage = icon.getImage();\n\n                // Create scaled instance with high quality\n                this.image = originalImage.getScaledInstance(size, size, Image.SCALE_AREA_AVERAGING);\n\n                // Pre-render for better performance\n                MediaTracker tracker = new MediaTracker(this);\n                tracker.addImage(this.image, 0);\n                tracker.waitForID(0);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                    RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            // Draw white circle background\n            g2.setColor(Color.WHITE);\n            g2.fillOval(0, 0, size, size);\n\n            // Create circular clip\n            g2.setClip(new Ellipse2D.Float(1, 1, size - 2, size - 2));\n            // Draw image if loaded\n            if (image != null) {\n                g2.drawImage(image, 0, 0, this);\n            }\n\n            g2.setClip(null);\n            g2.setColor(new Color(200, 200, 200)); // Lighter gray for softer appearance\n            g2.setStroke(new BasicStroke(1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));\n            g2.drawOval(1, 1, size - 2, size - 2);\n            g2.dispose();\n        }\n    }\n\n    public void run() {\n        frame = new JFrame(\"Chatter\");\n        frame.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n\n        // addFriendButton = new RoundedButton(\"Friend\", 15);\n        // addFriendButton.setBackground(new Color(0, 149, 246));\n        // addFriendButton.setForeground(Color.WHITE);\n        // addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        // addFriendButton.setPreferredSize(new Dimension(150, 20));\n\n        // addBlockButton = new RoundedButton(\"Block\", 15);\n        // addBlockButton.setBackground(new Color(0, 149, 246));\n        // addBlockButton.setForeground(Color.WHITE);\n        // addBlockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        // addBlockButton.setPreferredSize(new Dimension(150, 20));\n\n        client = loginPanel.getClient();\n        if (client == null) {\n            frame.setVisible(false);\n            this.loginPanel = null;\n            frame.dispose();\n            return;\n        }\n        if (!isConnected()) {\n            displayError(\"Connection Lost\");\n            frame.setVisible(false);\n            this.loginPanel = null;\n            frame.dispose();\n            return;\n        }\n        String username = loginPanel.getUsername();\n        chatPanel = new chatPanel(client);\n        profilePanel = new ProfilePanel(username, client);\n        updateProfilePanel();\n        chatListPanel = new ChatListPanel(client);\n        // NEW CHANGE TESTING\n        refreshChats();\n        createHeader();\n        gbc.fill = GridBagConstraints.BOTH;\n        gbc.anchor = GridBagConstraints.CENTER;\n\n        gbc.weightx = 0.2;\n        gbc.weighty = 1.0;\n        frame.add(chatListPanel, gbc);\n\n        gbc.weightx = 0.5;\n        frame.add(chatPanel, gbc);\n\n        gbc.weightx = 1.2;\n        // frame.add(profilePanel, gbc);\n        chatListPanel.addPropertyChangeListener(\"selectedChat\", evt -> {\n            String selectedUser = (String) evt.getNewValue();\n            if (selectedUser != null) {\n                try {\n                    count += 1;\n                    chatPanel.refreshChat(selectedUser);\n                    if (count > 1) {\n                        frame.remove(selectedProfilePanel);\n                    }\n                    String profile = client.accessUserProfile(selectedUser);\n                    String photos = client.accessPhotosFromUser(selectedUser);\n                    selectedProfilePanel = new ProfilePanel(profile, photos);\n                    JButton[] friendAndBlockButtons = selectedProfilePanel.getFriendAndBlockButtons();\n                    ArrayList<String> friendList = new ArrayList<>();\n                    ArrayList<String> blockList = new ArrayList<>();\n                    try {\n                        String friends = client.getFriendList();\n                        if (!friends.isEmpty()) {\n                            for (String s : friends.split(\"\" + (char) 29))\n                            {\n                                friendList.add(s);\n                            }\n                        }\n                        String blocks = client.getBlockList();\n                        if (!blocks.isEmpty()) {\n                            for (String s : blocks.split(\"\" + (char) 29))\n                            {\n                                blockList.add(s);\n                            }\n                        }\n                    } catch (IOException ex) {\n                        disconnect();\n                        return;\n                    }\n\n                    if (friendList.contains(selectedUser)) {\n                        friendAndBlockButtons[0].setText(\"Unfriend\");\n                    }\n\n                    if (blockList.contains(selectedUser)) {\n                        friendAndBlockButtons[1].setText(\"Unblock\");\n                    }\n\n                    friendAndBlockButtons[0].addActionListener(new ActionListener() {\n                        @Override\n                        public void actionPerformed(ActionEvent e) {\n                            try {\n                                if (!client.addFriend(selectedUser)) {\n                                    client.removeFriend(selectedUser);\n                                    friendAndBlockButtons[0].setText(\"Friend\");\n                                } else {\n                                    friendAndBlockButtons[0].setText(\"Unfriend\");\n                                }\n                            } catch (Exception ex) {\n                                disconnect();\n                            }\n                        }\n                    });\n\n                    friendAndBlockButtons[1].addActionListener(new ActionListener() {\n                        @Override\n                        public void actionPerformed(ActionEvent e) {\n                            try {\n                                if (!client.blockUser(selectedUser)) {\n                                    client.unblockUser(selectedUser);\n                                    friendAndBlockButtons[1].setText(\"Block\");\n                                } else {\n                                    friendAndBlockButtons[1].setText(\"Unblock\");\n                                }\n                            } catch (Exception ex) {\n                                disconnect();\n                            }\n                        }\n                    });\n\n                    frame.add(selectedProfilePanel, gbc);\n                    frame.revalidate();\n                    frame.repaint();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        // // addFriendButton.addActionListener(e -> {\n        // // try {\n        // // String otherUsername = chatListPanel.getSelectedChat();\n        // // if (otherUsername == null || otherUsername.isEmpty()) {\n        // // return;\n        // // }\n        // // if (!client.addFriend(otherUsername)) {\n        // // client.removeFriend(otherUsername);\n        // // }\n        // // } catch (IOException ex) {\n        // // disconnect();\n        // // }\n        // // });\n\n        // // addBlockButton.addActionListener(e -> {\n        // // try {\n        // // String otherUsername = chatListPanel.getSelectedChat();\n        // // if (otherUsername == null || otherUsername.isEmpty()) {\n        // // return;\n        // // }\n        // // if (!client.blockUser(otherUsername)) {\n        // // client.unblockUser(otherUsername);\n        // // }\n        // // } catch (IOException ex) {\n        // // disconnect();\n        // // }\n        // // });\n\n        logoutButton = new RoundedButton(\"Logout\", 15);\n        logoutButton.setBackground(new Color(0, 149, 246));\n        logoutButton.setForeground(Color.WHITE);\n        logoutButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        logoutButton.setPreferredSize(new Dimension(100, 20));\n        logoutButton.addActionListener(e -> logout());\n        RoundedPanel logoutPanel = new RoundedPanel(15);\n        logoutPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));\n        logoutPanel.add(logoutButton);\n        // // logoutPanel.add(addFriendButton, logoutConstraints);\n        // // logoutPanel.add(addBlockButton, logoutConstraints);\n        GridBagConstraints logoutGbc = new GridBagConstraints();\n        logoutGbc.gridx = 2; // Right column\n        logoutGbc.gridy = 2; // Bottom row\n        logoutGbc.anchor = GridBagConstraints.SOUTHEAST;\n        logoutGbc.insets = new Insets(0, 0, 10, 10);\n        frame.add(logoutPanel, logoutGbc);\n        frame.setSize(1200, 800);\n        frame.setLocationRelativeTo(null);\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\n                logout();\n                disconnect();\n            }\n        });\n        updateGUI();\n        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n        frame.setSize(screenSize.width, screenSize.height);\n        // Set frame to maximized state\n        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n\n        // Center the dialog\n        frame.setLocation(0, 0);\n\n        // Make the dialog visible\n        frame.setVisible(true);\n        scheduleUpdates();\n    }\n\n    public void refreshChats() {\n        String chats = \"\";\n        try {\n            chats = client.getChatList();\n        } catch (IOException e) {\n            disconnect();\n            return;\n        }\n        String[] chatsArray = chats.split(\"\" + (char) 29);\n        try {\n            chatListPanel.refreshChats(chatsArray);\n        } catch (IOException ex) {\n            disconnect();\n            return;\n        }\n        String selectedChat = chatListPanel.getSelectedChat();\n        if (selectedChat != null && !selectedChat.isEmpty()) {\n            try {\n                chatPanel.refreshChat(selectedChat);\n            } catch (Exception e) {\n                // TODO: handle exception\n            }\n        }\n    }\n\n    public void updateProfilePanel() {\n        if (!isConnected()) {\n            return;\n        }\n        String profile = \"\";\n        try {\n            profile = client.accessProfile();\n        } catch (IOException e) {\n            disconnect();\n            return;\n        }\n        if (profile == null) {\n            disconnect();\n            return;\n        }\n        String[] profileParts = profile.split(\"\" + (char) 29);\n\n        String username = profileParts[0].substring(profileParts[0].indexOf(\":\") + 1);\n        String firstName = profileParts[1].substring(profileParts[1].indexOf(\":\") + 1);\n        String lastName = profileParts[2].substring(profileParts[2].indexOf(\":\") + 1);\n        String bio = profileParts[3].substring(profileParts[3].indexOf(\":\") + 1);\n        String birthday = profileParts[4].substring(profileParts[4].indexOf(\":\") + 1);\n        String[] birthdayParts = birthday.split(\"/\");\n        String day = birthdayParts[1];\n        String month = birthdayParts[0];\n        String year = birthdayParts[2];\n        String profilePic = profileParts[5].substring(profileParts[5].indexOf(\":\") + 1);\n        String friendsOnly = profileParts[6].substring(profileParts[6].indexOf(\":\") + 1);\n\n        profilePanel.refreshProfile(username, firstName, lastName, bio, month, day, year, profilePic, friendsOnly);\n    }\n\n    // public void updateFriendsAndBlocks() {\n    // String friends;\n    // try {\n    // friends = client.getFriendList();\n    // } catch (IOException e) {\n    // disconnect();\n    // return;\n    // }\n    // String[] friendsArray = friends.split(\"\" + (char) 29);\n    // String blocks;\n    // try {\n    // blocks = client.getBlockList();\n    // } catch (IOException e) {\n    // disconnect();\n    // return;\n    // }\n    // String[] blocksArray = blocks.split(\"\" + (char) 29);\n    // profilePanel.updateFriendsAndBlocks(friendsArray, blocksArray);\n    // }\n\n    public void updateChat() {\n        // chatPanel.updateChat(chat);\n    }\n\n    public void displayMessage(String message) {\n        // chatPanel.displayMessage();\n    }\n\n    public void displayError(String error) {\n        JOptionPane.showMessageDialog(frame, error, \"Error\", JOptionPane.ERROR_MESSAGE);\n    }\n\n    private void scheduleUpdates() {\n        Timer timer = new Timer(300, new ActionListener() { // Check every 1 second\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                // Update GUI components\n                if (loginPanel == null) {\n                    return;\n                }\n                updateGUI();\n            }\n        });\n        if (frame.isVisible()) {\n            timer.start();\n        }\n    }\n\n    public void updateGUI() {\n        if (!isConnected()) {\n            displayError(\"Connection Lost\");\n            disconnect();\n            return;\n        }\n        refreshChats();\n    }\n\n    public void logout() {\n        try {\n            client.logout();\n        } catch (IOException e) {\n            displayError(\"Connection Lost\");\n            disconnect();\n            return;\n        }\n        this.loginPanel = null;\n        frame.setVisible(false);\n        frame.dispose();\n    }\n\n    public void disconnect() {\n        if (client != null) {\n            client.disconnect();\n            client = null;\n        }\n        frame.setVisible(false);\n        frame.dispose();\n    }\n\n    public boolean isDone() {\n        return loginPanel == null;\n    }\n\n    public boolean isConnected() {\n        try {\n            client.login(\"\");\n        } catch (IOException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        LoginPanel loginPanel;\n        int i = JOptionPane.showConfirmDialog(null, \"Auto login to user1 Password1$?\",\n                \"Auto Login\", JOptionPane.YES_NO_OPTION);\n        if (i == JOptionPane.YES_OPTION) {\n            try {\n                Client client = new Client();\n                client.login(\"user3\" + (char) 29 + \"Password3$\");\n                loginPanel = new LoginPanel(client);\n            } catch (IOException e) {\n                JOptionPane.showMessageDialog(null, \"Could not connect to server\",\n                        \"Error\", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n            while (true) {\n                SwingUtilities.invokeLater(loginPanel);\n                while (!loginPanel.isDone()) { // Wait for login panel to finish\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                GUI gui = new GUI(loginPanel);\n                SwingUtilities.invokeLater(gui);\n                while (!gui.isDone()) {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                int j = JOptionPane.showConfirmDialog(null, \"continue?\",\n                        \"Auto Login\", JOptionPane.YES_NO_OPTION);\n                if (j != JOptionPane.YES_OPTION) {\n                    System.out.println(\"Disconnecting...\");\n                    gui.disconnect();\n                    loginPanel = null;\n                    return;\n                }\n            }\n        } else if (i == JOptionPane.NO_OPTION) {\n            while (true) {\n                try {\n                    loginPanel = new LoginPanel(new Client());\n                } catch (IOException e) {\n                    JOptionPane.showMessageDialog(null, \"Could not connect to server\",\n                            \"Error\", JOptionPane.ERROR_MESSAGE);\n                    return;\n                }\n                if (!loginPanel.isConnected()) {\n                    return;\n                }\n                SwingUtilities.invokeLater(loginPanel);\n                while (!loginPanel.isDone()) { // Wait for login panel to finish\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                GUI gui = new GUI(loginPanel);\n                SwingUtilities.invokeLater(gui);\n                while (!gui.isDone()) {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/GUI.java b/src/main/java/GUI.java
--- a/src/main/java/GUI.java	(revision 71160503590c61e885e7092c035c7c90bf759cb6)
+++ b/src/main/java/GUI.java	(date 1733519309898)
@@ -180,12 +180,14 @@
                 String friends = client.getFriendList();
                 String blocks = client.getBlockList();
                 if (!friends.isEmpty()) {
-                    friendList = (ArrayList<String>) Arrays.asList(friends.split(
-                            "" + (char) 29));
+                    for (String friend : friends.split("" + (char) 29)) {
+                        friendList.add(friend);
+                    }
                 }
                 if (!blocks.isEmpty()) {
-                    blockList =  (ArrayList<String>) Arrays.asList(blocks.split(
-                            "" + (char) 29));
+                    for (String block : blocks.split("" + (char) 29)) {
+                        blockList.add(block);
+                    }
                 }
                 profilePanel.createComponent(null, friendList, blockList);
             } catch (IOException ex) {
@@ -355,15 +357,13 @@
                     try {
                         String friends = client.getFriendList();
                         if (!friends.isEmpty()) {
-                            for (String s : friends.split("" + (char) 29))
-                            {
+                            for (String s : friends.split("" + (char) 29)) {
                                 friendList.add(s);
                             }
                         }
                         String blocks = client.getBlockList();
                         if (!blocks.isEmpty()) {
-                            for (String s : blocks.split("" + (char) 29))
-                            {
+                            for (String s : blocks.split("" + (char) 29)) {
                                 blockList.add(s);
                             }
                         }
Index: src/main/java/ProfilePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.BasicStroke;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Image;\nimport java.awt.Insets;\nimport java.awt.RenderingHints;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\nimport javax.swing.*;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport javax.swing.plaf.basic.BasicScrollBarUI;\n\npublic class ProfilePanel extends JPanel {\n    private GridBagConstraints constraints;\n    private JLabel fullNameLabel;\n    private JLabel usernameLabel;\n    private JLabel firstNameLabel;\n    private JLabel lastNameLabel;\n    private JLabel bioLabel;\n    private JLabel birthdayMonthLabel;\n    private JLabel birthdayDayLabel;\n    private JLabel birthdayYearLabel;\n    private JLabel friendsOnlyLabel;\n    private JLabel profilePic;\n    private RoundedButton addFriendButton;\n    private RoundedButton blockButton;\n    private Client client;\n\n    public String getProfilePic() {\n        return profilePic.getText();\n    }\n\n    private static class RoundedPanel extends JPanel {\n        private int radius;\n\n        public RoundedPanel(int radius) {\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            super.paintComponent(g);\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedButton extends JButton {\n        private Color backgroundColor;\n        private Color hoverBackgroundColor;\n        private Color pressedBackgroundColor;\n        private int radius;\n        private boolean isHovered = false;\n        private boolean isPressed = false;\n\n        public RoundedButton(String text, int radius) {\n            super(text);\n            this.radius = radius;\n            setContentAreaFilled(false);\n            setFocusPainted(false);\n            setBorderPainted(false);\n            setOpaque(false);\n\n            // Add hover effect\n            addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseEntered(MouseEvent e) {\n                    isHovered = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseExited(MouseEvent e) {\n                    isHovered = false;\n                    repaint();\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    isPressed = true;\n                    repaint();\n                }\n\n                @Override\n                public void mouseReleased(MouseEvent e) {\n                    isPressed = false;\n                    repaint();\n                }\n            });\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            // Get current background color\n            Color background = getBackground();\n            if (isPressed) {\n                background = background.darker();\n            } else if (isHovered) {\n                background = background.brighter();\n            }\n\n            g2.setColor(background);\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n\n            super.paintComponent(g);\n            g2.dispose();\n        }\n    }\n\n    private static class CircularImagePanel extends JPanel {\n        private Image image;\n        private int size;\n        private int a = getX();\n        private int b = getY();\n\n        public CircularImagePanel(String imagePath, int size) {\n            this.size = size;\n            try {\n                ImageIcon icon = new ImageIcon(imagePath);\n                Image originalImage = icon.getImage();\n                int originalWidth = originalImage.getWidth(null);\n                int originalHeight = originalImage.getHeight(null);\n\n                int cropSize = Math.min(originalWidth, originalHeight);\n                int x = (originalWidth - cropSize) / 2;\n                int y = (originalHeight - cropSize) / 2;\n                BufferedImage croppedImage = new BufferedImage(cropSize, cropSize, BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g2d = croppedImage.createGraphics();\n                g2d.drawImage(originalImage, 0, 0, cropSize, cropSize, x, y, x + cropSize, y + cropSize, null);\n                g2d.dispose();\n                image = croppedImage.getScaledInstance(size, size, Image.SCALE_SMOOTH);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            setPreferredSize(new Dimension(size, size));\n        }\n\n        public void updateImage(String imagePath, int size) {\n            this.size = size;\n            try {\n                // Load and process new image\n                ImageIcon icon = new ImageIcon(imagePath);\n                Image originalImage = icon.getImage();\n                int originalWidth = originalImage.getWidth(null);\n                int originalHeight = originalImage.getHeight(null);\n\n                // Crop to square\n                int cropSize = Math.min(originalWidth, originalHeight);\n                int x = (originalWidth - cropSize) / 2;\n                int y = (originalHeight - cropSize) / 2;\n\n                // Create new cropped image\n                BufferedImage croppedImage = new BufferedImage(cropSize, cropSize, BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g2d = croppedImage.createGraphics();\n                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                g2d.drawImage(originalImage, 0, 0, cropSize, cropSize, x, y, x + cropSize, y + cropSize, null);\n                g2d.dispose();\n\n                // Scale and set new image\n                this.image = croppedImage.getScaledInstance(size, size, Image.SCALE_SMOOTH);\n\n                // Update panel size\n\n                // Update panel bounds\n                setPreferredSize(new Dimension(size, size));\n\n                // Force complete repaint\n                revalidate();\n                repaint();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                    RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n\n            // Draw white circle background\n            g2.setColor(Color.WHITE);\n            g2.fillOval(0, 0, size, size);\n\n            // Create circular clip\n            g2.setClip(new Ellipse2D.Float(1, 1, size - 2, size - 2));\n            // Draw image if loaded\n            if (image != null) {\n                g2.drawImage(image, 0, 0, this);\n            }\n\n            g2.setClip(null);\n            g2.setColor(new Color(200, 200, 200)); // Lighter gray for softer appearance\n            g2.setStroke(new BasicStroke(1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));\n            g2.drawOval(1, 1, size - 2, size - 2);\n            g2.dispose();\n        }\n    }\n\n    public ProfilePanel(String username, Client client) {\n        try {\n            this.client = client;\n            this.setLayout(null);\n            this.usernameLabel = new JLabel(username);\n            char groupSeparator = (char) 29;\n            String profileInput = this.client.accessProfile();\n            String[] profileInfo = profileInput.split(groupSeparator + \"\");\n            profilePic = new JLabel(profileInfo[5].substring(profileInfo[5].indexOf(\":\") + 2));\n            JLabel pic = new JLabel(profilePic.getText());\n            if (pic.getText().equals(\"profile.png\") || pic.getText().isEmpty() || pic.getText().equals(\"\")) {\n                pic.setText(\"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\");\n            }\n            firstNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim());\n            lastNameLabel = new JLabel(profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            bioLabel = new JLabel(profileInfo[3].substring(profileInfo[3].indexOf(\":\") + 1).trim());\n            String birthday = profileInfo[4].substring(profileInfo[4].indexOf(\":\") + 1).trim();\n            String[] birthdayParts = birthday.split(\"/\");\n            birthdayMonthLabel = new JLabel(birthdayParts[0]);\n            birthdayDayLabel = new JLabel(birthdayParts[1]);\n            birthdayYearLabel = new JLabel(birthdayParts[2]);\n            friendsOnlyLabel = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(\":\") + 1));\n            // Get screen dimensions\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // Create and setup black background\n            JPanel blackBackground = new RoundedPanel(30);\n            blackBackground.setLayout(null);\n            blackBackground.setBackground(Color.BLACK);\n            int blackPanelWidth = (int) (screenSize.width * 0.6); // 60% width\n            blackBackground.setBounds(0, 10, blackPanelWidth, screenSize.height - 180);\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                pic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            this.add(imagePanel);\n            Font labelFont = new Font(\"Monospaced\", Font.BOLD, 16);\n            Color textColor = Color.WHITE;\n            int fieldWidth = 400;\n            int fieldHeight = 30;\n            int startX = 50;\n            int startY = 250;\n            int verticalGap = 25;\n\n            // Full Name\n            JLabel fullNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim() + \" \"\n                    + profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n            fullNameLabel.setFont(labelFont);\n            fullNameLabel.setForeground(textColor);\n            fullNameLabel.setBounds(startX, startY, fieldWidth, fieldHeight); // maybe change height to fieldHeight\n\n            // First Name\n            firstNameLabel.setFont(labelFont);\n            firstNameLabel.setForeground(textColor);\n            firstNameLabel.setBounds(startX, startY + verticalGap, fieldWidth, fieldHeight);\n\n            // Last Name\n            lastNameLabel.setFont(labelFont);\n            lastNameLabel.setForeground(textColor);\n            lastNameLabel.setBounds(startX, startY + (verticalGap * 2), fieldWidth, fieldHeight);\n\n            // Bio\n            bioLabel.setFont(labelFont);\n            bioLabel.setForeground(textColor);\n            bioLabel.setBounds(startX, startY + (verticalGap * 3), fieldWidth, fieldHeight);\n\n            // Birthday Month\n            birthdayMonthLabel.setFont(labelFont);\n            birthdayMonthLabel.setForeground(textColor);\n            birthdayMonthLabel.setBounds(startX, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Day\n            birthdayDayLabel.setFont(labelFont);\n            birthdayDayLabel.setForeground(textColor);\n            birthdayDayLabel.setBounds(startX + 30, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Birthday Year\n            birthdayYearLabel.setFont(labelFont);\n            birthdayYearLabel.setForeground(textColor);\n            birthdayYearLabel.setBounds(startX + 60, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n            // Friends Only\n            if (friendsOnlyLabel.getText().equals(\"true\")) {\n                ImageIcon appIcon = new ImageIcon(\"C:/Users/peter/Github/CS180Team-Project/images/icons8-lock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            } else {\n                ImageIcon appIcon = new ImageIcon(\n                        \"C:/Users/peter/Github/CS180Team-Project/images/icons8-unlock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            }\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            // After birthday section:\n            // Button styling\n            Color instagramBlue = new Color(0, 149, 246);\n            int buttonWidth = 270; // Wider rectangle\n            int buttonHeight = 35;\n            int buttonGap = 10;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // Create Add Friend button\n            addFriendButton = new RoundedButton(\"Add Friend\", 16);\n            addFriendButton.setBackground(instagramBlue);\n            addFriendButton.setForeground(Color.WHITE);\n            addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            addFriendButton.setBounds(startX - 5, buttonsY, buttonWidth, buttonHeight);\n            addFriendButton.setFocusPainted(false);\n\n            // Create Block button\n            blockButton = new RoundedButton(\"Block\", 16);\n            blockButton.setBackground(instagramBlue);\n            blockButton.setForeground(Color.WHITE);\n            blockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n            blockButton.setBounds(startX + buttonWidth + buttonGap - 10, buttonsY, buttonWidth, buttonHeight);\n            blockButton.setFocusPainted(false);\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n            String photosInfo = client.accessPhotosFromUser(username);\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < imagePaths.length; i++) {\n                imagePaths[i] = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n            }\n            if (photos[0].contains(\",\")) {\n                if (photos.length < 6) {\n                    for (int i = 0; i < photos.length; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                } else {\n                    for (int i = 0; i < 6; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n            this.add(blackBackground);\n            this.add(gridPanel);\n            this.add(addFriendButton);\n            this.add(blockButton);\n            this.add(messagesNumber);\n            this.add(messagesLabel);\n            this.add(friendsNumber);\n            this.add(friendsLabel);\n            this.add(blockedNumber);\n            this.add(blockedLabel);\n            this.add(fullNameLabel);\n            this.add(firstNameLabel);\n            this.add(lastNameLabel);\n            this.add(bioLabel);\n            this.add(birthdayMonthLabel);\n            this.add(birthdayDayLabel);\n            this.add(birthdayYearLabel);\n            this.add(blackBackground);\n            this.setMaximumSize(new Dimension(screenSize.width, screenSize.height));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public ProfilePanel(String profile, String photosInfo) {\n        try {\n            this.setLayout(null);\n            char groupSeparator = (char) 29;\n            String[] profileInfo = profile.split(groupSeparator + \"\");\n\n            initializeLabels(profileInfo);\n\n            if (profilePic.getText().equals(\"profile.png\") || profilePic.getText().isEmpty() || profilePic.getText().equals(\"\")) {\n                //pic.setText(\"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\");\n                profilePic.setText(\"../../images/default-image.jpg\");\n            }\n\n            // Get screen dimensions\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // Create and setup black background\n            JPanel blackBackground = createBlackBackgroundPanel(screenSize);\n\n            // Create the profilePicture panel\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                    profilePic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            this.add(imagePanel);\n\n\n            // Format the labels\n            formatLabels();\n\n            // Friends Only\n            if (friendsOnlyLabel.getText().equals(\"true\")) {\n                ImageIcon appIcon = new ImageIcon(\"../../images/icons8-lock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            } else {\n                ImageIcon appIcon = new ImageIcon(\n                        \"../../images/icons8-unlock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                this.add(iconLabel);\n            }\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            createFriendAndBlockButtons();\n\n            // Formatting integers.\n            int startY = 250;\n            int verticalGap = 25;\n            int buttonHeight = 35;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < imagePaths.length; i++) {\n                imagePaths[i] = \"C:/Users/peter/Github/CS180Team-Project/images/default-image.jpg\";\n            }\n            if (photos[0].contains(\",\")) {\n                if (photos.length < 6) {\n                    for (int i = 0; i < photos.length; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                } else {\n                    for (int i = 0; i < 6; i++) {\n                        char gs = 29;\n                        String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                        imagePaths[i] = lmao[1];\n                    }\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n\n            // add everything to panel\n            this.add(gridPanel);\n            this.add(addFriendButton);\n            this.add(blockButton);\n            this.add(messagesNumber);\n            this.add(messagesLabel);\n            this.add(friendsNumber);\n            this.add(friendsLabel);\n            this.add(blockedNumber);\n            this.add(blockedLabel);\n            this.add(fullNameLabel);\n            this.add(firstNameLabel);\n            this.add(lastNameLabel);\n            this.add(bioLabel);\n            this.add(birthdayMonthLabel);\n            this.add(birthdayDayLabel);\n            this.add(birthdayYearLabel);\n            this.add(blackBackground);\n            this.setMaximumSize(new Dimension(screenSize.width, screenSize.height));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public JButton[] getFriendAndBlockButtons() {\n        return new JButton[]{addFriendButton, blockButton};\n    }\n\n    public void createComponent(ActionListener saveCallback, ArrayList<String> friendList,\n                                ArrayList<String> blockList) {\n        try {\n            char groupSeparator = (char) 29;\n            String profileInput = this.client.accessProfile();\n            String[] profileInfo = profileInput.split(groupSeparator + \"\");\n\n            initializeLabels(profileInfo);\n            formatLabels();\n\n            JFrame frame = new JFrame(\"My Profile\");\n            // JDialog editDialog = new JDialog(frame, \"Edit Profile\", true);\n            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n\n            JPanel mainPanel = new JPanel(null);\n            JPanel friendAndBlockPanel = new JPanel(null);\n            JPanel blackBackground = createBlackBackgroundPanel(new Dimension(screenSize.width, screenSize.height));\n            blackBackground.setBounds(0, 0, (int) (screenSize.width / 2.5), screenSize.height - 98);\n\n            CircularImagePanel imagePanel = new CircularImagePanel(\n                    profilePic.getText(), 150);\n            imagePanel.setBounds(40, 80, 100, 100);\n            mainPanel.add(imagePanel);\n\n            // Setup friends and blocks lists.\n            RoundedTextField friendsText = new RoundedTextField(\"\", 50, 15);\n            friendsText.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n\n            RoundedTextField blocksText = new RoundedTextField(\"\", 50, 15);\n            blocksText.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n\n            if (friendList != null && friendList.size() > 0) {\n                String friendString = \"\";\n                for (String friend : friendList) {\n                    friendString += friend + \"\\n\";\n                }\n                friendsText.setText(friendString);\n            }\n\n            if (blockList != null && blockList.size() > 0) {\n                String blockString = \"\";\n                for (String block : blockList) {\n                    blockString += block + \"\\n\";\n                }\n                blocksText.setText(blockString);\n            }\n\n            // Friends Only\n            if (friendsOnlyLabel.getText().equals(\"true\")) {\n                ImageIcon appIcon = new ImageIcon(\"C:/Users/peter/Github/CS180Team-Project/images/icons8-lock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                mainPanel.add(iconLabel);\n            } else {\n                ImageIcon appIcon = new ImageIcon(\n                        \"C:/Users/peter/Github/CS180Team-Project/images/icons8-unlock-48.png\");\n                Image scaledIcon = appIcon.getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH);\n                JLabel iconLabel = new JLabel(new ImageIcon(scaledIcon));\n                iconLabel.setBounds(40, 20, 40, 40); // x, y, width, height\n                mainPanel.add(iconLabel);\n            }\n\n            // After creating imagePanel but before other labels:\n            // Stats styling\n            Font statsNumberFont = new Font(\"Arial\", Font.BOLD, 18);\n            Font statsLabelFont = new Font(\"Arial\", Font.PLAIN, 11);\n            Color statsColor = Color.WHITE;\n\n            // Calculate positions (align with profile picture)\n            int statsStartX = 275;\n            int statsY = 120; // Above profile picture\n            int statsWidth = 80;\n            int statsGap = 10;\n\n            // Messages Stats\n            JLabel messagesNumber = new JLabel(\"699\");\n            messagesNumber.setFont(statsNumberFont);\n            messagesNumber.setForeground(statsColor);\n            messagesNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesNumber.setBounds(statsStartX, statsY, statsWidth, 25);\n\n            JLabel messagesLabel = new JLabel(\"total messages\");\n            messagesLabel.setFont(statsLabelFont);\n            messagesLabel.setForeground(statsColor);\n            messagesLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            messagesLabel.setBounds(statsStartX, statsY + 25, statsWidth, 20);\n\n            // Friends Stats\n            JLabel friendsNumber = new JLabel(\"966\");\n            friendsNumber.setFont(statsNumberFont);\n            friendsNumber.setForeground(statsColor);\n            friendsNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsNumber.setBounds(statsStartX + statsWidth + statsGap, statsY, statsWidth, 25);\n\n            JLabel friendsLabel = new JLabel(\"friends\");\n            friendsLabel.setFont(statsLabelFont);\n            friendsLabel.setForeground(statsColor);\n            friendsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            friendsLabel.setBounds(statsStartX + statsWidth + statsGap, statsY + 25, statsWidth, 20);\n\n            // Blocked Stats\n            JLabel blockedNumber = new JLabel(\"1M\");\n            blockedNumber.setFont(statsNumberFont);\n            blockedNumber.setForeground(statsColor);\n            blockedNumber.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedNumber.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY, statsWidth, 25);\n\n            JLabel blockedLabel = new JLabel(\"blocked\");\n            blockedLabel.setFont(statsLabelFont);\n            blockedLabel.setForeground(statsColor);\n            blockedLabel.setHorizontalAlignment(SwingConstants.CENTER);\n            blockedLabel.setBounds(statsStartX + (statsWidth + statsGap) * 2, statsY + 25, statsWidth, 20);\n\n            createFriendAndBlockButtons();\n\n            // Formatting integers.\n            int startY = 250;\n            int verticalGap = 25;\n            int buttonHeight = 35;\n            int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n\n            // After adding the buttons:\n            int gridStartY = buttonsY + buttonHeight + 20; // Below buttons with some spacing\n            double gridWidth = screenSize.width / 2.5; // Half screen width\n            int gridHeight = screenSize.height - gridStartY - 95; // Fill remaining height\n\n            // Create panel for grid of pictures\n            JPanel gridPanel = new JPanel(new GridLayout(2, 3, 2, 2)); // 2 rows, 3 columns, 10px gaps\n            gridPanel.setBounds(0, gridStartY, (int) gridWidth, gridHeight);\n            gridPanel.setBackground(Color.BLACK);\n\n            String photosInfo = client.accessPhotosFromUser(profileInfo[0]);\n            String[] photos = photosInfo.split(\",\");\n            String[] imagePaths = new String[6];\n            for (int i = 0; i < photos.length && i < imagePaths.length; i++) {\n                imagePaths[i] = photos[i];\n            }\n            if (photos.length < 6) {\n                for (int i = 0; i < photos.length; i++) {\n                    char gs = 29;\n                    String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                    imagePaths[i] = lmao[1];\n                }\n            } else {\n                for (int i = 0; i < 6; i++) {\n                    char gs = 29;\n                    String[] lmao = photos[i].trim().replace(\"[\", \"\").replace(\"]\", \"\").split(gs + \"\");\n                    imagePaths[i] = lmao[1];\n                }\n            }\n\n            // Add 6 image panels to the grid\n            for (String imagePath : imagePaths) {\n                JPanel imagePanel2 = new JPanel() {\n                    @Override\n                    protected void paintComponent(Graphics g) {\n                        super.paintComponent(g);\n                        Graphics2D g2 = (Graphics2D) g.create();\n                        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                                RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n                        g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,\n                                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n                        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n                        try {\n                            ImageIcon icon = new ImageIcon(imagePath);\n                            Image image = icon.getImage();\n                            int imgWidth = image.getWidth(null);\n                            int imgHeight = image.getHeight(null);\n                            int panelWidth = getWidth();\n                            int panelHeight = getHeight();\n                            int cropSize = Math.min(imgWidth, imgHeight);\n                            int x = (imgWidth - cropSize) / 2;\n                            int y = (imgHeight - cropSize) / 2;\n                            g2.drawImage(image, 0, 0, panelWidth, panelHeight, x, y, x + cropSize, y + cropSize, this);\n                        } catch (Exception e) {\n                            g2.setColor(Color.WHITE);\n                            g2.fillRect(0, 0, getWidth(), getHeight());\n                        }\n                        g2.dispose();\n                    }\n                };\n                imagePanel2.setBackground(Color.BLACK);\n                gridPanel.add(imagePanel2);\n            }\n\n            if (saveCallback != null) {\n\n                JPanel rightPanel = new JPanel(new GridBagLayout());\n                rightPanel.setBackground(Color.WHITE);\n                rightPanel.setBounds((int) (screenSize.width / 2.5), 0, screenSize.width - (int) (screenSize.width / 2.5),\n                        screenSize.height);\n                mainPanel.add(rightPanel);\n\n                GridBagConstraints gbc = new GridBagConstraints();\n                gbc.insets = new Insets(10, 10, 10, 10);\n                gbc.gridx = 0;\n                gbc.gridy = 0;\n                gbc.anchor = GridBagConstraints.WEST;\n\n                String currentFullName = fullNameLabel.getText();\n                String currentFirstName = firstNameLabel.getText();\n                String currentLastName = lastNameLabel.getText();\n                String currentBio = bioLabel.getText();\n                String currentBirthdayMonth = birthdayMonthLabel.getText();\n                String currentBirthdayDay = birthdayDayLabel.getText();\n                String currentBirthdayYear = birthdayYearLabel.getText();\n                String currentFriendsOnly = friendsOnlyLabel.getText();\n                // Full Name\n                JLabel fullName = new JLabel(\"Full Name:\");\n                fullName.setPreferredSize(new Dimension(200, 30));\n                rightPanel.add(fullName, gbc);\n                gbc.gridx = 1;\n                RoundedTextField fullNameField = new RoundedTextField(currentFullName, 20, 15);\n                rightPanel.add(fullNameField, gbc);\n\n                // First Name\n                gbc.gridx = 0; // Reset to first column\n                gbc.gridy++;\n                JLabel firstName = new JLabel(\"First Name:\");\n                firstName.setPreferredSize(new Dimension(200, 30));\n                rightPanel.add(firstName, gbc);\n                gbc.gridx = 1;\n                RoundedTextField firstNameField = new RoundedTextField(currentFirstName, 20, 15); // Set current value and\n                // rounded corners\n                rightPanel.add(firstNameField, gbc);\n\n                // Last Name\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel lastName = new JLabel(\"Last Name:\");\n                lastName.setPreferredSize(new Dimension(200, 30)); // Increased width\n                rightPanel.add(lastName, gbc);\n                gbc.gridx = 1;\n                RoundedTextField lastNameField = new RoundedTextField(currentLastName, 20, 15);\n                rightPanel.add(lastNameField, gbc);\n\n                // Bio\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel bio = new JLabel(\"Bio:\");\n                bio.setPreferredSize(new Dimension(200, 30)); // Increased width\n                rightPanel.add(bio, gbc);\n                gbc.gridx = 1;\n                RoundedTextField bioField = new RoundedTextField(currentBio, 20, 15);\n                rightPanel.add(bioField, gbc);\n\n                // Birthday\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel birthdayMonth = new JLabel(\"Birth Month:\");\n                birthdayMonth.setPreferredSize(new Dimension(200, 30)); // Increased width\n                rightPanel.add(birthdayMonth, gbc);\n                gbc.gridx = 1;\n                RoundedTextField birthdayFieldMonth = new RoundedTextField(currentBirthdayMonth, 20, 15);\n                rightPanel.add(birthdayFieldMonth, gbc);\n\n                // Birthday\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel birthdayDay = new JLabel(\"Birth Day:\");\n                birthdayDay.setPreferredSize(new Dimension(200, 30)); // Increased width\n                rightPanel.add(birthdayDay, gbc);\n                gbc.gridx = 1;\n                RoundedTextField birthdayFieldDay = new RoundedTextField(currentBirthdayDay, 20, 15);\n                rightPanel.add(birthdayFieldDay, gbc);\n\n                // Birthday\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel birthdayYear = new JLabel(\"Birth Year:\");\n                birthdayYear.setPreferredSize(new Dimension(200, 30)); // Increased width\n                rightPanel.add(birthdayYear, gbc);\n                gbc.gridx = 1;\n                RoundedTextField birthdayFieldYear = new RoundedTextField(currentBirthdayYear, 20, 15);\n                rightPanel.add(birthdayFieldYear, gbc);\n\n                // Profile Picture\n                JButton browseButton = new JButton(\"Browse Files\");\n                browseButton.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        JFileChooser fileChooser = new JFileChooser();\n                        fileChooser.setFileFilter(new FileNameExtensionFilter(\n                                \"Image files\", \"jpg\", \"jpeg\", \"png\", \"gif\"));\n\n                        int result = fileChooser.showOpenDialog(null);\n                        if (result == JFileChooser.APPROVE_OPTION) {\n                            File selectedFile = fileChooser.getSelectedFile();\n                            profilePic.setText(selectedFile.getPath());\n                            // Update existing panel instead of creating new one\n                            imagePanel.updateImage(selectedFile.getPath(), 150);\n\n                            // Ensure proper bounds and visibility\n                            imagePanel.setBounds(40, 80, 150, 150);\n\n                            // Force container to refresh\n                            // mainPanel.revalidate();\n                            mainPanel.repaint();\n                        }\n                    }\n                });\n\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel profilePicture = new JLabel(\"Profile Picture: \");\n                profilePicture.setPreferredSize(new Dimension(200, 30));\n                rightPanel.add(profilePicture, gbc);\n                gbc.gridx = 1;\n                rightPanel.add(browseButton, gbc);\n\n                // Friends Only\n                gbc.gridx = 0;\n                gbc.gridy++;\n                JLabel friendsOnly = new JLabel(\"Messages limited to friends:\");\n                friendsOnly.setPreferredSize(new Dimension(200, 30)); // Increased width\n                rightPanel.add(friendsOnly, gbc);\n                gbc.gridx = 1;\n                JCheckBox friendsOnlyCheckBox = new JCheckBox();\n                if (currentFriendsOnly.equals(\"true\")) {\n                    friendsOnlyCheckBox.setSelected(true);\n                } else {\n                    friendsOnlyCheckBox.setSelected(false);\n                }\n                rightPanel.add(friendsOnlyCheckBox, gbc);\n\n                // Add listeners to update profile on the left in real-time\n\n                // Add listeners to update profile on the left in real-time\n                fullNameField.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        fullNameLabel.setText(fullNameField.getText());\n                    }\n                });\n\n                firstNameField.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        firstNameLabel.setText(firstNameField.getText());\n                    }\n                });\n\n                lastNameField.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        lastNameLabel.setText(lastNameField.getText());\n                    }\n                });\n\n                bioField.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        bioLabel.setText(bioField.getText());\n                    }\n                });\n\n                birthdayFieldMonth.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        birthdayMonthLabel.setText(birthdayFieldMonth.getText());\n                    }\n                });\n\n                birthdayFieldDay.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        birthdayDayLabel.setText(birthdayFieldDay.getText());\n                    }\n                });\n\n                birthdayFieldYear.getDocument().addDocumentListener(new DocumentListener() {\n                    @Override\n                    public void changedUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void removeUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    @Override\n                    public void insertUpdate(DocumentEvent e) {\n                        updateProfile();\n                    }\n\n                    public void updateProfile() {\n                        birthdayYearLabel.setText(birthdayFieldYear.getText());\n                    }\n                });\n                firstNameField.setPreferredSize(new Dimension(400, 50)); // Increased size\n                lastNameField.setPreferredSize(new Dimension(400, 50)); // Increased size\n                bioField.setPreferredSize(new Dimension(400, 50)); // Increased size\n                birthdayFieldMonth.setPreferredSize(new Dimension(400, 50)); // Increased size\n                birthdayFieldDay.setPreferredSize(new Dimension(400, 50)); // Increased size\n                birthdayFieldYear.setPreferredSize(new Dimension(400, 50)); // Increased size\n\n                friendsOnlyCheckBox.addActionListener(new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        friendsOnlyLabel.setText(friendsOnlyCheckBox.isSelected() ? \"Yes\" : \"No\");\n                    }\n                });\n\n                // Create a button to save the changes\n                RoundedButton saveButton = new RoundedButton(\"Save\", 16);\n                Color instagramBlue = new Color(0, 149, 246);\n                saveButton.setBackground(instagramBlue);\n                saveButton.setForeground(Color.WHITE);\n                saveButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n                saveButton.setBounds(40, buttonsY + buttonHeight + 20, 270, buttonHeight); // Position below the //\n                // other buttons\n                saveButton.setFocusPainted(false);\n                saveButton.addActionListener(new ActionListener() {\n                    public void actionPerformed(ActionEvent e) {\n                        // Save the changes\n                        char groupSeparator = (char) 29;\n                        String content = usernameLabel.getText().trim() + groupSeparator +\n                                firstNameField.getText().trim() +\n                                groupSeparator + lastNameField.getText().trim() + groupSeparator +\n                                bioField.getText().trim() +\n                                groupSeparator + birthdayFieldMonth.getText().trim() + \"/\" +\n                                birthdayFieldDay.getText().trim()\n                                + \"/\" + birthdayFieldYear.getText().trim() + groupSeparator + profilePic.getText() +\n                                groupSeparator +\n                                ((Boolean) friendsOnlyCheckBox.isSelected()).toString().trim();\n                        try {\n                            if (client.saveProfile(content)) {\n                                firstNameLabel.setText(firstNameField.getText().trim());\n                                lastNameLabel.setText(lastNameField.getText().trim());\n                                bioLabel.setText(bioField.getText().trim());\n                                birthdayMonthLabel.setText(birthdayFieldMonth.getText().trim());\n                                birthdayDayLabel.setText(birthdayFieldDay.getText().trim());\n                                birthdayYearLabel.setText(birthdayFieldYear.getText().trim());\n                                profilePic.setText(profilePic.getText());\n                                friendsOnlyLabel.setText(((Boolean) friendsOnlyCheckBox.isSelected()).toString().trim());\n                                // Close the dialog\n                                if (saveCallback != null) {\n                                    saveCallback.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"Save\"));\n                                }\n                                frame.dispose();\n                            } else {\n                                // Show an error message\n                                JOptionPane.showMessageDialog(null, \"Invalid profile information, \" +\n                                        \"try again\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                            }\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    }\n                });\n                frame.add(saveButton, BorderLayout.SOUTH);\n            }\n\n            // Add grid panel to main panel\n            //mainPanel.add(gridPanel);\n            mainPanel.add(addFriendButton);\n            mainPanel.add(blockButton);\n            mainPanel.add(messagesNumber);\n            mainPanel.add(messagesLabel);\n            mainPanel.add(friendsNumber);\n            mainPanel.add(friendsLabel);\n            mainPanel.add(blockedNumber);\n            mainPanel.add(blockedLabel);\n            mainPanel.add(fullNameLabel);\n            mainPanel.add(firstNameLabel);\n            mainPanel.add(lastNameLabel);\n            mainPanel.add(bioLabel);\n            mainPanel.add(birthdayMonthLabel);\n            mainPanel.add(birthdayDayLabel);\n            mainPanel.add(birthdayYearLabel);\n            mainPanel.add(blackBackground);\n            mainPanel.setPreferredSize(new Dimension(screenSize.width, screenSize.height));\n            // Set the size of the dialog\n            frame.setSize(screenSize.width, screenSize.height);\n            // Set frame to maximized state\n            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);\n\n            // Center the dialog\n            frame.setLocation(0, 0);\n\n            // Make the dialog visible\n            frame.setVisible(true);\n\n            // Add the panel and button to the dialog\n            friendAndBlockPanel.setBackground(Color.WHITE);\n            friendAndBlockPanel.setBounds((int) (screenSize.width / 2.5), 0, screenSize.width -\n                    (int) (screenSize.width / 2.5), screenSize.height);\n            //mainPanel.add(friendAndBlockPanel);\n            frame.add(mainPanel);\n            //c.weightx = 0.3;\n            //c.gridx = 1;\n            //frame.add(friendAndBlockPanel, c);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Set up labels based on profile information\n    public void initializeLabels(String[] profileInfo) {\n        this.usernameLabel = new JLabel(profileInfo[0]);\n        fullNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim() + \" \"\n                + profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n        firstNameLabel = new JLabel(profileInfo[1].substring(profileInfo[1].indexOf(\":\") + 1).trim());\n        lastNameLabel = new JLabel(profileInfo[2].substring(profileInfo[2].indexOf(\":\") + 1).trim());\n        bioLabel = new JLabel(profileInfo[3].substring(profileInfo[3].indexOf(\":\") + 1).trim());\n        String birthday = profileInfo[4].substring(profileInfo[4].indexOf(\":\") + 1).trim();\n        profilePic = new JLabel(profileInfo[5].substring(profileInfo[5].indexOf(\":\") + 2));\n        friendsOnlyLabel = new JLabel(profileInfo[6].substring(profileInfo[6].indexOf(\":\") + 1));\n        String[] birthdayParts = birthday.split(\"/\");\n        birthdayMonthLabel = new JLabel(birthdayParts[0]);\n        birthdayDayLabel = new JLabel(birthdayParts[1]);\n        birthdayYearLabel = new JLabel(birthdayParts[2]);\n    }\n\n    public JPanel createBlackBackgroundPanel(Dimension screenSize) {\n        JPanel blackBackground = new RoundedPanel(30);\n        blackBackground.setLayout(null);\n        blackBackground.setBackground(Color.BLACK);\n        int blackPanelWidth = (int) (screenSize.width * 0.6); // 60% width\n        blackBackground.setBounds(0, 10, blackPanelWidth, screenSize.height - 180);\n        return blackBackground;\n    }\n\n    public void formatLabels() {\n        // Create Font and formatting variables\n        Font labelFont = new Font(\"Monospaced\", Font.BOLD, 16);\n        Color textColor = Color.WHITE;\n        int fieldWidth = 400;\n        int fieldHeight = 30;\n        int startX = 50;\n        int startY = 250;\n        int verticalGap = 25;\n\n\n        fullNameLabel.setFont(labelFont);\n        fullNameLabel.setForeground(textColor);\n        fullNameLabel.setBounds(startX, startY, fieldWidth, fieldHeight); // maybe change height to fieldHeight\n\n        // First Name\n        firstNameLabel.setFont(labelFont);\n        firstNameLabel.setForeground(textColor);\n        firstNameLabel.setBounds(startX, startY + verticalGap, fieldWidth, fieldHeight);\n\n        // Last Name\n        lastNameLabel.setFont(labelFont);\n        lastNameLabel.setForeground(textColor);\n        lastNameLabel.setBounds(startX, startY + (verticalGap * 2), fieldWidth, fieldHeight);\n\n        // Bio\n        bioLabel.setFont(labelFont);\n        bioLabel.setForeground(textColor);\n        bioLabel.setBounds(startX, startY + (verticalGap * 3), fieldWidth, fieldHeight);\n\n        // Birthday Month\n        birthdayMonthLabel.setFont(labelFont);\n        birthdayMonthLabel.setForeground(textColor);\n        birthdayMonthLabel.setBounds(startX, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n        // Birthday Day\n        birthdayDayLabel.setFont(labelFont);\n        birthdayDayLabel.setForeground(textColor);\n        birthdayDayLabel.setBounds(startX + 30, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n\n        // Birthday Year\n        birthdayYearLabel.setFont(labelFont);\n        birthdayYearLabel.setForeground(textColor);\n        birthdayYearLabel.setBounds(startX + 60, startY + (verticalGap * 4), fieldWidth, fieldHeight);\n    }\n\n    public void createFriendAndBlockButtons() {\n        // After birthday section:\n        // Button styling\n        int startX = 50;\n        int startY = 250;\n        int verticalGap = 25;\n        Color instagramBlue = new Color(0, 149, 246);\n        int buttonWidth = 270; // Wider rectangle\n        int buttonHeight = 35;\n        int buttonGap = 10;\n        int buttonsY = startY + (verticalGap * 5) + 18; // Below birthday section\n        // Create Add Friend button\n        addFriendButton = new RoundedButton(\"Add Friend\", 16);\n        addFriendButton.setBackground(instagramBlue);\n        addFriendButton.setForeground(Color.WHITE);\n        addFriendButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        addFriendButton.setBounds(startX - 5, buttonsY, buttonWidth, buttonHeight);\n        addFriendButton.setFocusPainted(false);\n\n        // Create Block button\n        blockButton = new RoundedButton(\"Block\", 16);\n        blockButton.setBackground(instagramBlue);\n        blockButton.setForeground(Color.WHITE);\n        blockButton.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        blockButton.setBounds(startX + buttonWidth + buttonGap - 10, buttonsY, buttonWidth, buttonHeight);\n        blockButton.setFocusPainted(false);\n    }\n\n    public void refreshProfile(String username, String firstName, String lastName, String bio, String month, String day,\n            String year,\n            String profilePic, String friendsOnly) {\n        usernameLabel.setText(username);\n        firstNameLabel.setText(firstName);\n        lastNameLabel.setText(lastName);\n        bioLabel.setText(bio);\n        birthdayMonthLabel.setText(month);\n        birthdayDayLabel.setText(day);\n        birthdayYearLabel.setText(year);\n        friendsOnlyLabel.setText(friendsOnly);\n    }\n\n    class RoundedTextField extends JTextField {\n        private int radius;\n\n        public RoundedTextField(String text, int columns, int radius) {\n            super(text, columns);\n            this.radius = radius;\n            setOpaque(false);\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getBackground());\n            g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            super.paintComponent(g);\n            g2.dispose();\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n            g2.setColor(getForeground());\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedScrollPane extends JScrollPane {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedScrollPane(Component view, int radius) {\n            super(view);\n            this.radius = radius;\n            setOpaque(false);\n            setBorder(BorderFactory.createEmptyBorder());\n\n            // Style the scrollbars\n            getVerticalScrollBar().setUI(new BasicScrollBarUI() {\n                @Override\n                protected void configureScrollBarColors() {\n                    this.thumbColor = new Color(200, 200, 200);\n                    this.trackColor = new Color(245, 245, 245);\n                }\n\n                @Override\n                protected JButton createDecreaseButton(int orientation) {\n                    return createZeroButton();\n                }\n\n                @Override\n                protected JButton createIncreaseButton(int orientation) {\n                    return createZeroButton();\n                }\n\n                private JButton createZeroButton() {\n                    JButton button = new JButton();\n                    button.setPreferredSize(new Dimension(0, 0));\n                    return button;\n                }\n            });\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n\n            // Set rendering hints\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\n            // Fill background\n            if (backgroundColor != null) {\n                g2.setColor(backgroundColor);\n            } else {\n                g2.setColor(getBackground());\n            }\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n\n            g2.dispose();\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(new Color(200, 200, 200));\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n\n    private static class RoundedJList<E> extends JList<E> {\n        private int radius;\n        private Color backgroundColor;\n\n        public RoundedJList(int radius) {\n            super();\n            this.radius = radius;\n            init();\n        }\n\n        public RoundedJList(ListModel<E> model, int radius) {\n            super(model);\n            this.radius = radius;\n            init();\n        }\n\n        private void init() {\n            setOpaque(false);\n            setCellRenderer(new DefaultListCellRenderer() {\n                @Override\n                public Component getListCellRendererComponent(JList<?> list, Object value,\n                        int index, boolean isSelected, boolean cellHasFocus) {\n                    Component c = super.getListCellRendererComponent(list, value,\n                            index, isSelected, cellHasFocus);\n\n                    if (isSelected) {\n                        setBackground(new Color(0, 149, 246, 50));\n                        setForeground(Color.BLACK);\n                    } else {\n                        setBackground(list.getBackground());\n                        setForeground(list.getForeground());\n                    }\n\n                    setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));\n                    return c;\n                }\n            });\n        }\n\n        @Override\n        public void setBackground(Color bg) {\n            this.backgroundColor = bg;\n            repaint();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\n            // Fill background\n            if (backgroundColor != null) {\n                g2.setColor(backgroundColor);\n            } else {\n                g2.setColor(getBackground());\n            }\n            g2.fillRoundRect(0, 0, getWidth(), getHeight(), radius, radius);\n\n            g2.dispose();\n            super.paintComponent(g);\n        }\n\n        @Override\n        protected void paintBorder(Graphics g) {\n            Graphics2D g2 = (Graphics2D) g.create();\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.setColor(new Color(200, 200, 200));\n            g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, radius, radius);\n            g2.dispose();\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ProfilePanel.java b/src/main/java/ProfilePanel.java
--- a/src/main/java/ProfilePanel.java	(revision 71160503590c61e885e7092c035c7c90bf759cb6)
+++ b/src/main/java/ProfilePanel.java	(date 1733519415486)
@@ -880,19 +880,17 @@
                 gridPanel.add(imagePanel2);
             }
 
-            if (saveCallback != null) {
-
-                JPanel rightPanel = new JPanel(new GridBagLayout());
-                rightPanel.setBackground(Color.WHITE);
-                rightPanel.setBounds((int) (screenSize.width / 2.5), 0, screenSize.width - (int) (screenSize.width / 2.5),
-                        screenSize.height);
-                mainPanel.add(rightPanel);
-
-                GridBagConstraints gbc = new GridBagConstraints();
-                gbc.insets = new Insets(10, 10, 10, 10);
-                gbc.gridx = 0;
-                gbc.gridy = 0;
-                gbc.anchor = GridBagConstraints.WEST;
+            JPanel rightPanel = new JPanel(new GridBagLayout());
+            rightPanel.setBackground(Color.WHITE);
+            rightPanel.setBounds((int) (screenSize.width / 2.5), 0, screenSize.width - (int) (screenSize.width / 2.5),
+                    screenSize.height);
+            mainPanel.add(rightPanel);
+            GridBagConstraints gbc = new GridBagConstraints();
+            gbc.insets = new Insets(10, 10, 10, 10);
+            gbc.gridx = 0;
+            gbc.gridy = 0;
+            gbc.anchor = GridBagConstraints.WEST;
+            if (saveCallback != null) {
 
                 String currentFullName = fullNameLabel.getText();
                 String currentFirstName = firstNameLabel.getText();
@@ -1231,6 +1229,12 @@
                     }
                 });
                 frame.add(saveButton, BorderLayout.SOUTH);
+            } else {
+                gbc.gridy = GridBagConstraints.RELATIVE;
+                rightPanel.add(friendsLabel, gbc);
+                rightPanel.add(friendsText);
+                rightPanel.add(blockedLabel);
+                rightPanel.add(friendsText);
             }
 
             // Add grid panel to main panel
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b0abc399-0f3b-4251-bbf6-d07aad17a43b\" name=\"Changes\" comment=\"Stuff throws exceptions to GUI now.\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/messageHistory.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/messageHistory.txt\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/GUI.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/GUI.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/LoginPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/LoginPanel.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ProfilePanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ProfilePanel.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 7\n}</component>\n  <component name=\"ProjectId\" id=\"2pisuY6CwKQYFh6yVVhvZa2Seg3\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.GUI.executor\": \"Run\",\n    \"Application.MessageHistoryTestCases (1).executor\": \"Run\",\n    \"Application.MessageHistoryTestCases.executor\": \"Run\",\n    \"Application.MessageTestCases.executor\": \"Run\",\n    \"Application.ServerGUI.executor\": \"Run\",\n    \"Application.UserTestCases.executor\": \"Run\",\n    \"JUnit.ClientTest.executor\": \"Run\",\n    \"JUnit.DatabaseTestCases.executor\": \"Run\",\n    \"JUnit.ServerTest.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\">\n    <configuration name=\"MessageHistoryTestCases (1)\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"MessageHistoryTestCases\" />\n      <module name=\"CS180Team-Project1\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"MessageHistoryTestCases\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"MessageHistoryTestCases\" />\n      <module name=\"CS180Team-Project1\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <module name=\"CS180Team-Project1\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"Python.FlaskServer\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"Tox\" factoryName=\"Tox\">\n      <module name=\"CS180Team-Project1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.MessageHistoryTestCases (1)\" />\n        <item itemvalue=\"Application.MessageHistoryTestCases\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b0abc399-0f3b-4251-bbf6-d07aad17a43b\" name=\"Changes\" comment=\"\" />\n      <created>1733260455985</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1733260455985</updated>\n      <workItem from=\"1733260458364\" duration=\"1000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Changed the friend/block buttons to change to unfriend/unblock if they are already blocked and friended and vice versa!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733457444718</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733457444718</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Temporary unworking code for displaying the friends and blocks list.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733463352763</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733463352763</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733465739197</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733465739197</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Removed the NewChat button from chatlistpanel.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733493641394</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733493641394</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Stuff throws exceptions to GUI now.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1733505815460</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1733505815460</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"6\" />\n    <servers />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"commit for git tracking.\" />\n    <MESSAGE value=\"Changed the friend/block buttons to change to unfriend/unblock if they are already blocked and friended and vice versa!\" />\n    <MESSAGE value=\"Temporary unworking code for displaying the friends and blocks list.\" />\n    <MESSAGE value=\"Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users.\" />\n    <MESSAGE value=\"Removed the NewChat button from chatlistpanel.\" />\n    <MESSAGE value=\"Stuff throws exceptions to GUI now.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Stuff throws exceptions to GUI now.\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/Server.java</url>\n          <line>91</line>\n          <option name=\"timeStamp\" value=\"31\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/GUI.java</url>\n          <line>203</line>\n          <option name=\"timeStamp\" value=\"34\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n    <pin-to-top-manager>\n      <pinned-members>\n        <PinnedItemInfo parentTag=\"java.lang.String\" memberName=\"value\" />\n      </pinned-members>\n    </pin-to-top-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 71160503590c61e885e7092c035c7c90bf759cb6)
+++ b/.idea/workspace.xml	(date 1733519309961)
@@ -4,11 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b0abc399-0f3b-4251-bbf6-d07aad17a43b" name="Changes" comment="Stuff throws exceptions to GUI now.">
+    <list default="true" id="b0abc399-0f3b-4251-bbf6-d07aad17a43b" name="Changes" comment="Got rid of profilepanel editProfile.">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/messageHistory.txt" beforeDir="false" afterPath="$PROJECT_DIR$/messageHistory.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/GUI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/GUI.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/LoginPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/LoginPanel.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/ProfilePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ProfilePanel.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -189,7 +187,15 @@
       <option name="project" value="LOCAL" />
       <updated>1733505815460</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Got rid of profilepanel editProfile.">
+      <option name="closed" value="true" />
+      <created>1733514461418</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1733514461418</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -199,7 +205,8 @@
     <MESSAGE value="Removed Database from GUI and now it uses accessUserProfile/accessPhotosFromUser and a new profilePanel constructor to manage opening the panels of other users." />
     <MESSAGE value="Removed the NewChat button from chatlistpanel." />
     <MESSAGE value="Stuff throws exceptions to GUI now." />
-    <option name="LAST_COMMIT_MESSAGE" value="Stuff throws exceptions to GUI now." />
+    <MESSAGE value="Got rid of profilepanel editProfile." />
+    <option name="LAST_COMMIT_MESSAGE" value="Got rid of profilepanel editProfile." />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
@@ -210,9 +217,14 @@
           <option name="timeStamp" value="31" />
         </line-breakpoint>
         <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/main/java/GUI.java</url>
-          <line>203</line>
-          <option name="timeStamp" value="34" />
+          <url>file://$PROJECT_DIR$/src/main/java/ProfilePanel.java</url>
+          <line>1061</line>
+          <option name="timeStamp" value="35" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/main/java/ProfilePanel.java</url>
+          <line>242</line>
+          <option name="timeStamp" value="36" />
         </line-breakpoint>
       </breakpoints>
     </breakpoint-manager>
